#pragma GCC optimize("O2,unsafe-math-optimizations,no-math-errno,associative-math,reciprocal-math,fast-math")   // "fast-math" helps auto-vectorize loops
#include "soc/rtc_wdt.h"
#include "esp_system.h"
#include "esp32-hal.h"

int i2c_counter;
#include "esp_timer.h"
int fuzz_d2 = 255;
int fra = 0;
int bro = 0;
int tri_size = 0;
#define TIMER_FREQUENCY 12000

hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;


static unsigned int qqqx123 = 0;
#define CONFIG_ESP_TIMER_SUPPORTS_ISR_DISPATCH_METHOD 1
#define TDIV (150)
//#define SCREEN_MODE_DRIVER drive_128x64_vsync
//#define __SCREENMODE_MUX 63
#define DISABLE_DRIVER
#define CONSOLE_ENABLE_PRINTF


//#define ENABLE_VIDEO_VQ
static volatile unsigned char vsync_flag = 0;
unsigned char mux_0_countdown = 0;
#include <stdlib.h>
#include <stdfix.h>
#ifdef __AVR__
#include <avr/io.h>
#include <util/delay.h>

#include <avr/pgmspace.h>
#endif
#define DISABLE_OFAST
///////////////////////////////////////////////////////////////////////////////
//Gfx-Api Configuration
///////////////////////////////////////////////////////////////////////////////
#define DISPLAYFUNC Display
//#define ENABLE_SPRITES
unsigned char calc_diagram(unsigned char x, unsigned char y);
#define PIXEL_CALLBACK calc_diagram
//#define ENABLE_LAYERS

#define ENABLE_CONSOLE
#define NR_LAYERS 1
#define NR_SPRITES 0
//#define SUBTRACT_LAYER0
// rrr #define CONSOLE_SIZE_Y 1
//#define CONSOLE_LINE_START (0*8)




#include "tiny_multi_os.h"
//#include <avr/wdt.h>



static u8 console[128];




static volatile u8 flag = 0;
/*ISR(TIMER1_COMPA_vect) //Interrupt at frequency of 50 Hz
  {
  // flag++;
  // if(flag&1)
  vsync_flag=1;
  }*/

const u8 sin_tab[256]PROGMEM =
{
  32, 32, 33, 34, 35, 35, 36, 37, 38, 39, 39, 40, 41, 42, 42, 43, 44, 44, 45, 46, 47, 47, 48, 49, 49, 50, 51, 51, 52, 52, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 62, 62, 62, 62, 61, 61, 61, 60, 60, 60, 59, 59, 59, 58, 58, 57, 57, 56, 56, 55, 55, 54, 54, 53, 52, 52, 51, 51, 50, 49, 49, 48, 47, 47, 46, 45, 44, 44, 43, 42, 42, 41, 40, 39, 39, 38, 37, 36, 35, 35, 34, 33, 32, 31, 31, 30, 29, 28, 28, 27, 26, 25, 24, 24, 23, 22, 21, 21, 20, 19, 19, 18, 17, 16, 16, 15, 14, 14, 13, 12, 12, 11, 11, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 21, 22, 23, 24, 24, 25, 26, 27, 28, 28, 29, 30, 31
};

const u8 cat_tiles[] PROGMEM =
{

#if 1 //VIDEO VQ\r
  // charset A:
  4, 8, 1, 2, 0, 0, 4, 1, 5, 2, 5, 11, 5, 6, 11, 5, 12, 14, 13, 10, 4, 9, 2, 4, 78, 207, 206, 110, 207, 110, 207, 14, 0, 4, 0, 4, 8, 8, 4, 0, 8, 5, 0, 5, 8, 13, 10, 12, 13, 35, 7, 7, 11, 2, 5, 10, 63, 119, 63, 55, 63, 59, 7, 11, 2, 8, 1, 3, 0, 1, 9, 1, 6, 11, 6, 9, 6, 9, 2, 4, 7, 10, 6, 10, 5, 6, 12, 6, 143, 15, 79, 15, 143, 15, 15, 15, 4, 1, 5, 10, 3, 5, 10, 5, 11, 6, 13, 7, 5, 10, 5, 10, 10, 1, 8, 5, 10, 8, 1, 5, 5, 15, 21, 15, 29, 31, 59, 15, 8, 0, 0, 1, 8, 0, 0, 4, 10, 4, 2, 4, 4, 2, 12, 2, 13, 14, 10, 13, 13, 15, 13, 15, 31, 15, 15, 15, 7, 15, 15, 71, 5, 10, 0, 5, 2, 4, 1, 8, 4, 8, 8, 4, 12, 9, 4, 8, 10, 5, 11, 5, 27, 7, 27, 7, 13, 15, 15, 10, 15, 13, 7, 14, 4, 8, 0, 10, 0, 2, 8, 4, 9, 4, 2, 4, 9, 8, 2, 4, 11, 7, 142, 11, 6, 141, 43, 6, 239, 223, 239, 207, 223, 239, 207, 175, 8, 1, 4, 10, 1, 4, 5, 10, 4, 10, 9, 6, 10, 4, 2, 8, 11, 1, 11, 9, 2, 9, 7, 2, 55, 59, 55, 31, 63, 63, 119, 63, 8, 0, 0, 0, 8, 0, 0, 8, 10, 0, 5, 10, 1, 6, 11, 3, 119, 47, 59, 6, 8, 5, 10, 1, 15, 143, 15, 143, 141, 143, 79, 15, 8, 140, 8, 0, 0, 8, 0, 0, 10, 0, 5, 10, 4, 11, 6, 13, 3, 5, 2, 7, 6, 10, 5, 6, 15, 15, 3, 15, 11, 5, 15, 10, 8, 2, 8, 1, 0, 1, 8, 1, 6, 11, 4, 1, 4, 10, 0, 9, 2, 5, 14, 2, 13, 7, 111, 15, 15, 15, 159, 79, 175, 95, 239, 175, 8, 5, 2, 9, 2, 4, 2, 9, 11, 5, 10, 5, 14, 10, 5, 11, 8, 9, 9, 5, 17, 10, 1, 5, 29, 35, 7, 7, 27, 23, 31, 59, 0, 0, 0, 0, 0, 0, 0, 0, 3, 21, 10, 5, 3, 4, 10, 1, 13, 6, 9, 14, 5, 14, 12, 13, 15, 15, 15, 15, 15, 15, 15, 47, 2, 1, 4, 2, 9, 0, 2, 0, 2, 12, 9, 12, 10, 9, 8, 5, 13, 34, 5, 6, 13, 6, 5, 13, 7, 15, 15, 11, 7, 15, 15, 11, 8, 0, 1, 4, 1, 2, 0, 1, 5, 2, 4, 11, 0, 5, 10, 2, 5, 11, 5, 11, 3, 13, 11, 11, 255, 255, 255, 255, 255, 127, 127, 127, 4, 8, 1, 2, 4, 9, 2, 9, 2, 8, 5, 10, 5, 2, 5, 10, 11, 2, 3, 3, 5, 35, 11, 21, 191, 63, 119, 127, 63, 127, 127, 255, 1, 0, 4, 0, 1, 4, 0, 2, 5, 6, 9, 5, 13, 11, 5, 29, 79, 206, 78, 77, 10, 5, 11, 9, 15, 14, 79, 111, 111, 111, 111, 15, 0, 0, 0, 8, 1, 8, 8, 8, 10, 4, 8, 6, 9, 10, 4, 10, 7, 3, 7, 11, 7, 11, 7, 7, 255, 255, 255, 127, 63, 55, 31, 31, 2, 1, 2, 2, 1, 2, 1, 2, 11, 5, 15, 11, 5, 11, 4, 5, 5, 15, 6, 14, 7, 14, 7, 14, 111, 159, 111, 143, 15, 143, 79, 143, 2, 0, 5, 10, 1, 11, 2, 1, 5, 14, 10, 5, 15, 10, 5, 11, 10, 13, 8, 5, 10, 1, 9, 2, 29, 31, 31, 59, 31, 59, 63, 119, 4, 0, 1, 0, 2, 0, 0, 1, 5, 2, 4, 5, 2, 5, 10, 1, 6, 13, 14, 15, 78, 14, 13, 43, 7, 15, 15, 15, 71, 15, 7, 14, 2, 5, 10, 0, 4, 9, 0, 5, 6, 10, 12, 4, 14, 8, 12, 5, 29, 43, 11, 7, 11, 27, 7, 11, 13, 15, 15, 15, 11, 15, 14, 15, 0, 9, 0, 4, 1, 4, 0, 9, 4, 9, 4, 10, 9, 4, 8, 9, 3, 13, 3, 15, 6, 11, 13, 11, 191, 111, 223, 255, 239, 255, 191, 239, 8, 4, 8, 1, 4, 10, 0, 5, 2, 13, 10, 2, 12, 2, 4, 9, 4, 9, 11, 1, 3, 3, 17, 6, 55, 31, 63, 63, 119, 63, 63, 63, 4, 8, 0, 0, 2, 0, 0, 0, 10, 5, 6, 10, 5, 7, 7, 43, 103, 111, 47, 63, 14, 7, 12, 5, 143, 15, 207, 142, 79, 143, 79, 143, 8, 10, 8, 140, 8, 8, 0, 1, 4, 10, 9, 6, 13, 10, 13, 70, 11, 7, 10, 5, 11, 6, 10, 5, 175, 55, 15, 11, 7, 11, 29, 14, 1, 5, 2, 0, 1, 0, 8, 1, 13, 6, 9, 2, 4, 9, 2, 4, 11, 5, 14, 7, 78, 79, 239, 79, 223, 191, 175, 95, 175, 95, 47, 95, 10, 1, 2, 0, 5, 2, 9, 5, 13, 10, 5, 11, 5, 10, 5, 10, 69, 10, 13, 3, 5, 10, 3, 25, 59, 7, 15, 87, 59, 31, 55, 191, 2, 0, 0, 0, 2, 0, 0, 0, 2, 5, 3, 2, 5, 2, 5, 2, 13, 10, 13, 14, 78, 142, 206, 206, 15, 15, 15, 31, 15, 15, 15, 31, 2, 4, 8, 2, 0, 8, 4, 0, 10, 12, 13, 12, 11, 12, 5, 10, 42, 7, 5, 15, 21, 15, 23, 29, 15, 11, 15, 11, 13, 15, 14, 11, 0, 2, 0, 1, 4, 2, 8, 1, 10, 0, 5, 10, 0, 5, 10, 8, 13, 11, 13, 15, 13, 11, 11, 7, 255, 255, 255, 255, 255, 255, 255, 255, 2, 8, 4, 0, 9, 4, 10, 1, 5, 10, 4, 10, 5, 10, 5, 10, 25, 2, 5, 3, 11, 3, 11, 3, 63, 63, 127, 255, 255, 239, 255, 255,
#endif

  //-----------

#if 1 //VIDEO VQ\r
  // charset A:
  4, 0, 4, 8, 4, 0, 4, 0, 4, 0, 0, 0, 0, 1, 0, 0, 2, 4, 10, 1, 10, 4, 8, 5, 2, 5, 10, 2, 5, 10, 5, 10, 10, 13, 10, 5, 14, 5, 14, 10, 2, 8, 0, 4, 1, 8, 0, 4, 2, 0, 1, 4, 2, 8, 1, 4, 11, 6, 10, 5, 10, 13, 10, 5, 10, 1, 4, 1, 4, 2, 0, 4, 1, 0, 4, 1, 2, 4, 1, 8, 10, 1, 2, 4, 9, 2, 0, 5, 9, 4, 2, 0, 8, 0, 0, 4, 2, 4, 9, 2, 1, 10, 1, 2, 2, 13, 10, 5, 10, 5, 10, 5, 0, 8, 1, 4, 0, 2, 0, 8, 11, 7, 13, 11, 6, 11, 7, 10, 8, 1, 0, 5, 8, 2, 1, 4, 0, 0, 2, 0, 0, 8, 0, 0, 12, 2, 5, 8, 5, 10, 0, 5, 13, 11, 14, 7, 10, 13, 7, 10, 2, 0, 5, 0, 5, 2, 9, 2, 2, 8, 0, 4, 1, 0, 1, 4, 4, 2, 9, 4, 2, 8, 1, 4, 12, 7, 10, 5, 15, 10, 5, 10, 4, 0, 2, 8, 0, 0, 1, 8, 0, 4, 1, 10, 0, 2, 8, 4, 2, 4, 9, 2, 4, 10, 1, 6, 8, 9, 4, 1, 4, 8, 1, 4, 2, 5, 10, 1, 2, 5, 2, 5, 10, 1, 8, 4, 9, 2, 8, 2, 5, 14, 9, 6, 9, 6, 0, 5, 13, 43, 6, 13, 71, 10, 13, 70, 0, 2, 1, 0, 5, 2, 0, 5, 8, 0, 0, 1, 0, 0, 2, 0, 5, 10, 8, 4, 9, 4, 10, 8, 5, 10, 5, 10, 5, 7, 10, 5, 0, 2, 0, 8, 0, 2, 0, 8, 13, 11, 6, 13, 11, 6, 11, 13, 2, 12, 10, 5, 10, 5, 10, 5, 8, 4, 1, 4, 10, 1, 8, 5, 12, 0, 5, 2, 8, 4, 1, 8, 1, 0, 4, 0, 8, 0, 1, 0, 9, 5, 2, 9, 4, 10, 0, 5, 8, 1, 4, 1, 4, 10, 1, 4, 4, 0, 8, 0, 9, 4, 2, 8, 2, 0, 4, 8, 2, 0, 8, 2, 4, 0, 2, 0, 4, 0, 1, 4, 4, 0, 4, 2, 1, 8, 0, 2, 8, 1, 8, 0, 5, 10, 0, 5, 8, 0, 0, 4, 0, 0, 1, 8, 10, 10, 5, 10, 4, 5, 10, 1, 10, 5, 10, 5, 10, 5, 4, 9, 0, 5, 2, 4, 8, 2, 9, 4, 4, 0, 8, 1, 0, 4, 0, 5, 13, 6, 11, 4, 11, 4, 13, 10, 11, 13, 6, 13, 11, 6, 13, 10, 4, 0, 10, 0, 9, 4, 10, 1, 0, 8, 0, 0, 0, 0, 0, 8, 13, 42, 5, 15, 10, 5, 5, 10, 3, 12, 2, 5, 8, 5, 10, 4, 1, 5, 2, 5, 2, 5, 3, 5, 4, 0, 2, 8, 0, 0, 4, 1, 2, 4, 10, 0, 5, 10, 0, 2, 6, 10, 13, 7, 13, 14, 7, 14, 8, 1, 8, 0, 4, 0, 9, 0, 0, 0, 2, 0, 8, 0, 0, 1, 2, 8, 0, 0, 0, 4, 0, 0, 5, 10, 5, 10, 5, 10, 4, 10, 2, 4, 2, 9, 4, 1, 8, 2, 2, 0, 8, 0, 4, 0, 8, 2, 2, 8, 5, 10, 4, 10, 12, 9, 10, 5, 10, 5, 14, 9, 6, 13, 10, 1, 4, 2, 8, 0, 1, 4, 8, 0, 0, 2, 0, 8, 1, 4, 2, 4, 1, 4, 10, 1, 4, 10, 9, 5, 6, 9, 6, 13, 6, 11, 5, 10, 2, 0, 2, 1, 3, 17, 0, 4, 0, 9, 2, 0, 9, 2, 10, 5, 10, 1, 2, 4, 1, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 4, 1, 2, 4, 8, 2, 1, 0, 2, 8, 2, 1, 0, 5, 2, 5, 10, 0, 5, 10, 1, 10, 4, 1, 8, 2, 0, 0, 4, 0, 1, 2, 8, 1, 0, 4, 0, 1, 4, 8, 5, 8, 1, 4, 2, 8, 0, 4, 9, 5, 10, 5, 10, 5, 10, 2, 8, 0, 0, 1, 4, 0, 2, 4, 0, 10, 0, 8, 5, 2, 4, 2, 4, 8, 1, 4, 2, 8, 0, 10, 1, 4, 10, 1, 4, 10, 5, 8, 5, 10, 0, 1, 4, 1, 8, 0, 1, 4, 0, 0, 9, 0, 2, 8, 0, 0, 8, 0, 8, 140, 136, 7, 10, 13, 2, 5, 10, 0, 5, 13, 11, 6, 11, 5, 14, 5, 15, 4, 0, 0, 4, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 0, 2, 10, 5, 2, 4, 10, 4, 8, 9, 8, 5, 10, 4, 10, 5, 10, 13, 10, 0, 9, 5, 2, 8, 2, 4, 9, 1, 0, 0, 2, 0, 4, 0, 0, 0, 1, 0, 2, 0, 0, 1, 12, 10, 5, 14, 10, 5, 142, 10, 2, 4, 4, 10, 1, 4, 8, 2, 10, 0, 1, 0, 4, 0, 2, 0, 5, 11, 5, 3, 13, 35, 7, 29, 5, 10, 10, 2, 13, 6, 15, 10, 8, 4, 9, 2, 0, 4, 0, 9, 0, 0, 4, 0, 8, 4, 0, 8, 6, 9, 6, 10, 1, 5, 10, 1, 43, 15, 21, 14, 11, 5, 14, 9, 1, 4, 0, 9, 2, 4, 0, 10, 8, 0, 0, 0, 0, 0, 4, 1, 5, 10, 12, 2, 13, 2, 12, 2, 5, 2, 9, 21, 10, 5, 11, 6, 9, 2, 4, 0, 9, 4, 10, 1, 2, 8, 0, 2, 0, 8, 1, 4, 10, 5, 5, 14, 9, 6, 9, 6, 11, 12, 7, 10, 13, 10, 5, 14, 8, 4, 1, 8, 5, 10, 0, 5, 4, 0, 4, 8, 4, 0, 4, 0, 2, 4, 9, 5, 2, 13, 2, 4, 11, 3, 13, 35, 13, 35, 15, 70, 2, 2, 1, 5, 10, 1, 5, 3, 8, 0, 8, 0, 8, 4, 10, 5, 13, 11, 5, 6, 9, 5, 10, 4, 11, 14, 69, 11, 14, 5, 15, 10,
#endif

  //-----------


};
static const u8 chunk_0[] __attribute__((progmem)) = {48, 48, 48, 48, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 112, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 112, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 112, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 112, 112, 48, 112, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 112, 48, 48,
                                                      //Frame:1 bytes before:128
                                                      128, 112, 112, 80, 16, 16, 64, 64, 64, 64, 64, 16, 64, 16, 16, 112, 131, 80, 112, 80, 80, 80, 64, 16, 16, 80, 16, 112, 131, 112, 16, 112, 16, 80, 112, 80, 112, 112, 135, 112, 112, 112, 80, 112, 128, 112, 112, 112, 136, 112, 112, 131, 112, 112, 136, 112, 112, 112, 128, 112, 112, 112, 132, 112, 112, 128, 112, 128, 80, 16, 16, 96, 112, 96, 112, 16, 138, 112, 16, 16, 112,
                                                      128,/*skip:1 last*/

                                                      //Frame:2 bytes before:210
                                                      112, 128, 16, 120, 88, 0, 88, 88, 88, 88, 88, 0, 88, 0, 64, 128, 112, 112, 112, 16, 128, 16, 64, 64, 120, 88, 88, 0, 120, 64, 16, 112, 112, 112, 112, 32, 64, 16, 0, 130, 16, 96, 112, 112, 112, 128, 112, 112, 112, 112, 128, 16, 16, 128, 80, 80, 80, 16, 129, 112, 112, 112, 112, 112, 129, 16, 16, 16, 80, 80, 80, 112, 16, 16, 112, 112, 129, 112, 112, 112, 80, 80, 16, 128, 16, 32, 16, 16, 16, 112, 112, 129, 112, 16, 16, 112, 128, 16, 64, 64, 88, 128, 32, 129, 24, 129, 112, 131, 112, 128, 80, 80, 16, 64, 0, 16, 16,
                                                      //Frame:3 bytes before:327
                                                      16, 16, 120, 124, 121, 124, 121, 121, 121, 121, 84, 84, 124, 84, 0, 80, 16, 16, 16, 128, 120, 120, 120, 120, 124, 84, 124, 88, 44, 88, 64, 96, 16, 16, 128, 64, 0, 64, 128, 64, 64, 120, 64, 128, 16, 16, 16, 129, 16, 128, 16, 16, 64, 64, 120, 64, 120, 120, 64, 128, 112, 129, 16, 129, 80, 80, 56, 64, 128, 64, 16, 16, 16, 131, 112, 112, 16, 16, 131, 16, 96, 128, 64, 64, 64, 131, 16, 64, 96, 128, 96, 64, 52, 24, 124, 0, 0, 128, 16, 130, 16, 80, 80, 80, 112, 128, 80, 56, 56, 64, 84, 52, 128, 120,
                                                      //Frame:4 bytes before:441
                                                      64, 64, 124, 57, 61, 121, 57, 61, 61, 61, 57, 128, 61, 57, 84, 56, 64, 129, 120, 128, 124, 84, 60, 81, 61, 57, 60, 81, 60, 88, 130, 16, 88, 128, 124, 124, 128, 88, 44, 40, 0, 56, 56, 128, 80, 16, 128, 16, 40, 56, 120, 52, 128, 120, 128, 124, 120, 128, 16, 16, 16, 128, 16, 80, 128, 56, 129, 120, 120, 64, 64, 120, 96, 96, 96, 16, 16, 16, 64, 96, 16, 120, 120, 96, 64, 130, 0, 0, 16, 16, 128, 112, 32, 0, 128, 32, 128, 88, 128, 28, 57, 128, 88, 64, 128, 4, 128, 112, 131, 16, 80, 128, 72, 72, 88, 57, 84, 128, 108,
                                                      //Frame:5 bytes before:560
                                                      88, 88, 108, 45, 125, 61, 125, 125, 125, 125, 125, 57, 125, 125, 20, 129, 64, 64, 128, 124, 81, 81, 81, 125, 125, 61, 61, 61, 57, 124, 128, 64, 64, 64, 92, 116, 128, 17, 0, 24, 20, 60, 56, 129, 64, 129, 64, 56, 56, 104, 108, 128, 17, 88, 17, 128, 124, 16, 64, 64, 112, 130, 56, 104, 44, 0, 129, 24, 0, 129, 32, 128, 64, 129, 0, 128, 64, 52, 124, 130, 64, 24, 116, 128, 96, 129, 16, 4, 116, 130, 92, 84, 61, 9, 88, 128, 0, 96, 129, 16, 120, 130, 80, 128, 120, 44, 113, 124, 125, 89, 64, 12,
                                                      //Frame:6 bytes before:672
                                                      128, 124, 12, 77, 13, 45, 45, 109, 45, 77, 45, 125, 45, 45, 57, 44, 0, 88, 120, 17, 81, 1, 1, 1, 45, 13, 1, 45, 45, 128, 84, 129, 0, 88, 121, 44, 17, 128, 24, 28, 105, 76, 72, 52, 72, 120, 128, 64, 129, 8, 128, 12, 17, 128, 17, 128, 61, 84, 56, 56, 128, 32, 64, 64, 128, 72, 72, 129, 124, 52, 128, 52, 17, 128, 88, 130, 64, 129, 24, 84, 84, 0, 0, 128, 24, 128, 25, 52, 128, 64, 80, 64, 131, 64, 28, 25, 77, 128, 124, 124, 129, 64, 128, 64, 56, 56, 64, 120, 120, 56, 128, 38, 9, 92, 101, 25, 0, 90,
                                                      //Frame:7 bytes before:790
                                                      52, 60, 54, 26, 128, 77, 26, 26, 26, 26, 26, 45, 26, 26, 125, 81, 128, 52, 124, 81, 129, 90, 90, 26, 128, 13, 77, 26, 73, 57, 128, 88, 128, 92, 89, 17, 129, 25, 37, 9, 128, 44, 44, 108, 88, 64, 88, 128, 8, 129, 113, 129, 92, 93, 29, 129, 120, 0, 130, 56, 128, 44, 17, 116, 17, 17, 92, 133, 64, 88, 128, 116, 92, 121, 129, 116, 130, 92, 84, 128, 88, 16, 88, 40, 40, 128, 4, 24, 69, 28, 128, 2, 60, 121, 52, 129, 16, 120, 44, 72, 130, 72, 108, 10, 128, 5, 85, 129, 50,
                                                      //Frame:8 bytes before:899
                                                      128, 33, 90, 87, 26, 23, 23, 23, 23, 23, 23, 26, 23, 23, 45, 125, 88, 128, 44, 54, 1, 90, 129, 23, 83, 26, 23, 23, 90, 105, 16, 128, 88, 128, 93, 128, 10, 85, 14, 42, 110, 113, 12, 81, 81, 84, 0, 128, 24, 128, 72, 60, 6, 69, 85, 69, 117, 13, 20, 120, 64, 116, 48, 128, 56, 72, 128, 81, 57, 24, 128, 4, 21, 128, 29, 129, 0, 56, 128, 116, 24, 96, 28, 17, 128, 88, 128, 32, 116, 132, 64, 40, 14, 128, 112, 128, 124, 85, 37, 82, 105, 121, 57, 84, 16, 88, 64, 124, 72, 120, 120, 52, 129, 97, 74, 34, 128, 53, 129, 117,
                                                      //Frame:9 bytes before:1019
                                                      92, 97, 51, 115, 23, 87, 87, 87, 19, 87, 87, 23, 87, 128, 13, 13, 124, 124, 81, 129, 83, 55, 55, 11, 128, 23, 87, 87, 128, 125, 56, 84, 24, 69, 128, 10, 129, 53, 118, 129, 54, 1, 49, 129, 52, 76, 94, 113, 33, 34, 85, 129, 77, 129, 124, 120, 129, 0, 72, 128, 113, 17, 128, 92, 128, 21, 69, 60, 2, 128, 124, 52, 120, 88, 128, 116, 32, 29, 128, 25, 128, 4, 88, 128, 25, 128, 121, 129, 88, 129, 0, 40, 36, 5, 2, 101, 3, 128, 61, 61, 128, 96, 128, 88, 44, 81, 52, 108, 128, 108, 113, 42, 106, 105, 128, 14, 84, 64, 14,
                                                      //Frame:10 bytes before:1138
                                                      28, 70, 43, 107, 87, 115, 11, 11, 107, 75, 19, 51, 75, 87, 23, 77, 84, 128, 38, 128, 118, 15, 79, 51, 75, 19, 87, 115, 11, 83, 45, 8, 52, 28, 101, 102, 129, 53, 78, 83, 102, 38, 118, 6, 73, 105, 128, 0, 130, 97, 130, 50, 58, 129, 17, 17, 52, 80, 88, 130, 10, 29, 69, 29, 128, 78, 5, 128, 16, 116, 84, 24, 24, 25, 0, 92, 93, 10, 128, 25, 128, 40, 25, 128, 21, 128, 0, 24, 60, 14, 128, 52, 128, 40, 101, 128, 114, 82, 61, 125, 125, 121, 0, 128, 60, 81, 129, 12, 124, 33, 49, 83, 67, 29, 57, 57, 128, 16, 64,
                                                      //Frame:11 bytes before:1257
                                                      1, 47, 127, 128, 51, 75, 27, 107, 91, 27, 128, 43, 27, 11, 87, 39, 128, 108, 129, 83, 129, 43, 107, 43, 51, 107, 107, 19, 13, 113, 128, 53, 58, 128, 74, 129, 58, 19, 128, 54, 128, 39, 39, 129, 24, 94, 128, 49, 22, 50, 128, 117, 117, 119, 128, 49, 129, 20, 56, 56, 128, 62, 49, 128, 41, 128, 85, 128, 110, 128, 20, 32, 25, 128, 4, 25, 128, 116, 37, 128, 93, 84, 128, 40, 25, 60, 60, 4, 28, 128, 40, 14, 129, 40, 68, 92, 114, 93, 3, 66, 130, 105, 128, 124, 108, 1, 128, 124, 49, 128, 62, 45, 98, 98, 105, 61, 61, 129, 120,
                                                      //Frame:12 bytes before:1376
                                                      22, 31, 63, 128, 91, 91, 123, 59, 123, 128, 75, 123, 128, 75, 11, 103, 128, 33, 102, 128, 111, 129, 123, 59, 127, 43, 91, 91, 107, 119, 6, 92, 117, 122, 128, 23, 128, 117, 42, 129, 118, 15, 7, 83, 13, 116, 28, 46, 128, 76, 7, 130, 18, 35, 26, 129, 81, 128, 120, 8, 129, 97, 102, 89, 10, 128, 85, 73, 50, 128, 56, 89, 121, 96, 129, 32, 77, 101, 128, 60, 130, 28, 128, 40, 57, 52, 44, 129, 60, 128, 100, 28, 82, 101, 129, 93, 93, 45, 61, 52, 128, 1, 129, 33, 57, 61, 6, 42, 35, 129, 1, 45, 105, 64, 88,
                                                      //Frame:13 bytes before:1491
                                                      130, 19, 128, 123, 130, 91, 43, 131, 83, 92, 46, 62, 97, 131, 71, 107, 91, 130, 103, 97, 5, 18, 128, 90, 83, 128, 85, 106, 55, 129, 111, 129, 39, 52, 20, 128, 46, 33, 39, 10, 128, 101, 129, 22, 41, 128, 97, 128, 88, 128, 8, 128, 38, 57, 69, 128, 21, 117, 49, 117, 128, 120, 129, 112, 129, 92, 128, 74, 89, 28, 4, 129, 25, 128, 56, 113, 20, 116, 129, 52, 128, 36, 101, 66, 114, 128, 105, 89, 131, 24, 129, 84, 12, 84, 33, 128, 106, 99, 13, 125, 45, 129, 52,
                                                      128,/*skip:1 last*/

                                                      //Frame:14 bytes before:1595
                                                      128, 79, 95, 51, 129, 91, 128, 59, 59, 132, 87, 28, 128, 30, 22, 70, 118, 129, 63, 75, 129, 27, 27, 19, 82, 50, 128, 110, 55, 130, 83, 122, 130, 31, 128, 103, 20, 4, 14, 14, 22, 102, 74, 10, 82, 129, 86, 17, 128, 54, 128, 0, 129, 76, 6, 49, 130, 77, 61, 78, 128, 17, 17, 128, 8, 128, 4, 37, 13, 13, 20, 121, 116, 92, 92, 40, 20, 120, 81, 60, 130, 96, 68, 92, 114, 130, 61, 28, 89, 69, 69, 128, 88, 128, 81, 92, 49, 121, 1, 49, 35, 67, 125, 37, 131, 124,
                                                      //Frame:15 bytes before:1701
                                                      65, 128, 86, 43, 127, 131, 71, 91, 128, 75, 129, 119, 89, 117, 46, 130, 63, 59, 95, 43, 123, 130, 87, 103, 74, 82, 128, 35, 70, 128, 101, 131, 31, 95, 7, 83, 6, 21, 53, 69, 128, 97, 38, 130, 23, 129, 81, 65, 29, 104, 40, 128, 33, 1, 41, 125, 128, 85, 9, 29, 125, 128, 10, 128, 84, 130, 90, 45, 9, 84, 89, 96, 131, 24, 20, 121, 129, 25, 32, 100, 28, 128, 101, 3, 66, 57, 14, 128, 21, 21, 84, 124, 128, 20, 33, 128, 61, 62, 45, 128, 98, 128, 69, 101, 130, 24,
                                                      //Frame:16 bytes before:1807
                                                      54, 15, 55, 91, 63, 129, 91, 128, 75, 128, 59, 128, 11, 87, 35, 10, 85, 53, 122, 102, 70, 128, 71, 129, 91, 129, 107, 35, 19, 128, 10, 37, 122, 6, 38, 97, 103, 131, 63, 63, 103, 83, 128, 21, 125, 73, 70, 129, 74, 35, 128, 102, 128, 97, 58, 73, 113, 128, 104, 94, 61, 81, 1, 17, 101, 105, 128, 61, 84, 129, 105, 88, 128, 92, 13, 90, 93, 92, 128, 32, 25, 29, 14, 52, 40, 84, 60, 129, 116, 68, 36, 101, 3, 42, 128, 2, 25, 60, 84, 96, 60, 128, 104, 81, 25, 12, 84, 33, 6, 42, 18, 34, 61, 61, 125, 130, 56,
                                                      //Frame:17 bytes before:1924
                                                      38, 65, 51, 107, 130, 59, 91, 43, 123, 27, 130, 99, 129, 117, 128, 62, 129, 79, 128, 127, 130, 75, 99, 115, 70, 128, 106, 110, 126, 128, 47, 130, 47, 128, 71, 127, 71, 35, 85, 69, 109, 125, 6, 70, 38, 128, 87, 15, 129, 1, 110, 90, 49, 80, 28, 49, 57, 12, 129, 10, 57, 2, 73, 121, 2, 54, 33, 4, 128, 97, 125, 73, 20, 28, 116, 24, 89, 2, 28, 128, 56, 129, 52, 25, 96, 21, 92, 114, 66, 114, 128, 14, 129, 20, 56, 84, 60, 84, 20, 60, 49, 28, 126, 49, 83, 67, 93, 128, 69, 89, 69, 89, 84, 24,
                                                      //Frame:18 bytes before:2038
                                                      128, 54, 128, 79, 95, 127, 128, 91, 107, 134, 102, 10, 50, 117, 94, 128, 95, 131, 27, 129, 11, 107, 128, 105, 3, 128, 30, 129, 18, 110, 55, 129, 95, 128, 59, 7, 10, 101, 93, 126, 126, 102, 129, 83, 122, 113, 128, 54, 58, 87, 70, 32, 14, 76, 89, 81, 113, 128, 9, 37, 128, 30, 57, 44, 29, 45, 20, 17, 1, 33, 9, 89, 61, 128, 92, 69, 25, 69, 128, 72, 128, 20, 128, 116, 68, 100, 28, 3, 13, 3, 98, 128, 60, 5, 52, 120, 52, 128, 25, 84, 12, 57, 61, 62, 1, 98, 98, 61, 29, 61, 128, 4, 92, 92, 72,
                                                      //Frame:19 bytes before:2153
                                                      62, 38, 31, 133, 91, 59, 107, 129, 119, 11, 30, 74, 82, 128, 46, 47, 71, 133, 35, 75, 115, 113, 42, 98, 53, 128, 102, 39, 128, 58, 86, 130, 123, 123, 27, 93, 117, 128, 94, 128, 62, 70, 106, 54, 110, 128, 97, 65, 90, 107, 55, 92, 78, 53, 121, 12, 44, 38, 41, 74, 65, 126, 128, 38, 113, 73, 105, 108, 81, 1, 61, 92, 57, 4, 69, 128, 92, 14, 128, 108, 76, 57, 20, 96, 5, 116, 101, 128, 42, 67, 2, 121, 84, 53, 128, 24, 84, 92, 124, 60, 49, 121, 33, 6, 42, 82, 34, 57, 89, 12, 84, 16, 108, 124, 121,
                                                      //Frame:20 bytes before:2268
                                                      94, 22, 70, 15, 31, 130, 75, 130, 11, 19, 35, 115, 130, 53, 128, 111, 19, 15, 131, 107, 99, 107, 19, 57, 111, 34, 117, 46, 22, 128, 85, 131, 63, 129, 75, 101, 125, 20, 76, 46, 129, 83, 128, 30, 128, 38, 110, 55, 79, 7, 53, 5, 78, 12, 113, 113, 128, 17, 129, 1, 113, 12, 54, 128, 34, 38, 128, 49, 89, 121, 89, 24, 89, 29, 25, 121, 128, 88, 29, 28, 29, 32, 85, 92, 114, 66, 106, 128, 105, 25, 40, 117, 128, 88, 121, 14, 60, 33, 41, 28, 126, 1, 83, 67, 105, 81, 105, 49, 52, 56, 38, 113, 84,
                                                      //Frame:21 bytes before:2381
                                                      46, 129, 118, 79, 123, 128, 107, 43, 128, 91, 75, 128, 87, 99, 19, 126, 86, 74, 21, 78, 79, 83, 132, 75, 11, 128, 87, 33, 7, 50, 128, 78, 58, 102, 128, 18, 22, 111, 128, 127, 128, 59, 35, 10, 128, 40, 14, 130, 70, 130, 70, 58, 86, 111, 95, 78, 53, 105, 81, 76, 128, 49, 33, 34, 110, 106, 9, 38, 65, 119, 98, 113, 128, 57, 129, 116, 92, 69, 41, 57, 128, 84, 76, 41, 37, 1, 5, 41, 37, 3, 13, 67, 98, 121, 128, 5, 78, 128, 120, 128, 76, 105, 49, 84, 61, 62, 45, 98, 98, 61, 37, 128, 12, 128, 24, 37, 9, 52,
                                                      //Frame:22 bytes before:2499
                                                      53, 110, 38, 128, 43, 128, 27, 130, 107, 129, 119, 11, 87, 58, 128, 10, 85, 37, 107, 54, 132, 35, 75, 115, 128, 22, 39, 114, 130, 26, 128, 122, 129, 95, 129, 27, 99, 9, 29, 92, 21, 128, 126, 129, 65, 128, 33, 54, 129, 31, 63, 25, 117, 76, 76, 129, 44, 97, 54, 128, 82, 126, 102, 128, 106, 106, 81, 113, 129, 89, 4, 69, 37, 92, 121, 60, 20, 60, 17, 33, 42, 85, 92, 106, 98, 42, 128, 34, 25, 128, 50, 28, 128, 124, 53, 12, 128, 41, 28, 33, 6, 42, 74, 34, 121, 125, 108, 94, 128, 32, 90, 60, 20,
                                                      //Frame:23 bytes before:2612
                                                      85, 128, 62, 54, 127, 59, 127, 75, 91, 59, 129, 19, 35, 129, 35, 22, 38, 128, 42, 19, 130, 123, 27, 107, 99, 107, 19, 23, 128, 37, 74, 85, 117, 122, 128, 101, 131, 123, 128, 75, 11, 93, 52, 69, 131, 38, 78, 128, 62, 65, 122, 47, 95, 127, 69, 78, 20, 60, 72, 129, 70, 128, 45, 66, 102, 54, 128, 26, 42, 108, 81, 89, 28, 129, 93, 9, 25, 81, 128, 60, 30, 92, 128, 103, 41, 28, 3, 66, 67, 128, 89, 129, 100, 14, 128, 60, 14, 60, 73, 116, 61, 62, 1, 83, 67, 105, 81, 93, 128, 49, 128, 56, 73, 128, 57,
                                                      //Frame:24 bytes before:2727
                                                      50, 78, 130, 71, 107, 43, 128, 91, 128, 11, 87, 99, 87, 23, 66, 62, 129, 106, 55, 128, 79, 63, 129, 75, 11, 128, 87, 128, 49, 74, 132, 114, 110, 47, 128, 63, 128, 59, 35, 128, 29, 92, 89, 129, 30, 128, 102, 129, 38, 110, 86, 111, 63, 27, 85, 60, 60, 130, 108, 6, 61, 42, 110, 129, 26, 109, 15, 81, 57, 128, 121, 116, 92, 125, 41, 69, 121, 40, 5, 41, 17, 125, 122, 24, 101, 128, 77, 128, 98, 129, 92, 124, 17, 128, 17, 17, 17, 90, 92, 33, 6, 42, 98, 98, 121, 37, 105, 128, 12, 128, 72, 41, 20, 37,
                                                      //Frame:25 bytes before:2841
                                                      129, 94, 42, 128, 95, 130, 107, 75, 132, 78, 94, 128, 101, 83, 86, 129, 127, 130, 75, 115, 129, 33, 70, 130, 55, 50, 82, 30, 128, 31, 127, 128, 75, 99, 19, 116, 28, 69, 129, 22, 6, 10, 46, 128, 54, 58, 128, 31, 127, 128, 2, 20, 128, 8, 128, 72, 33, 49, 105, 82, 126, 128, 65, 128, 42, 86, 128, 89, 128, 89, 4, 28, 97, 92, 29, 60, 128, 46, 89, 44, 12, 1, 28, 114, 66, 106, 128, 34, 25, 128, 21, 60, 121, 84, 14, 121, 29, 42, 61, 62, 73, 106, 82, 34, 128, 125, 84, 44, 84, 128, 60, 76, 113, 33,
                                                      //Frame:26 bytes before:2955
                                                      128, 40, 128, 31, 71, 128, 75, 91, 131, 119, 11, 23, 128, 14, 30, 128, 97, 103, 128, 118, 130, 107, 99, 107, 19, 23, 119, 62, 129, 101, 128, 119, 101, 66, 126, 128, 95, 128, 59, 35, 11, 128, 92, 93, 89, 129, 62, 102, 85, 128, 12, 65, 122, 47, 95, 91, 11, 92, 124, 130, 44, 62, 81, 37, 66, 128, 29, 128, 109, 15, 111, 57, 128, 121, 25, 92, 93, 9, 121, 89, 84, 128, 105, 121, 128, 1, 54, 101, 3, 13, 67, 128, 89, 129, 2, 81, 57, 5, 78, 93, 78, 101, 33, 6, 45, 98, 67, 105, 128, 9, 124, 128, 113, 128, 17, 25, 105, 46,
                                                      //Frame:27 bytes before:3073
                                                      85, 36, 126, 95, 7, 128, 99, 131, 19, 35, 87, 129, 53, 129, 111, 130, 95, 123, 27, 75, 11, 128, 87, 131, 10, 50, 18, 128, 42, 110, 22, 111, 63, 123, 27, 99, 129, 28, 69, 130, 126, 128, 53, 128, 94, 128, 86, 31, 127, 27, 128, 20, 128, 40, 130, 6, 29, 42, 110, 102, 54, 26, 42, 86, 95, 89, 129, 116, 28, 61, 41, 61, 121, 40, 5, 121, 44, 12, 128, 13, 114, 66, 42, 128, 98, 25, 92, 5, 105, 121, 105, 53, 5, 29, 37, 50, 47, 128, 106, 114, 98, 57, 37, 20, 20, 76, 76, 94, 108, 108, 41, 69,
                                                      //Frame:28 bytes before:3185
                                                      21, 128, 22, 128, 79, 83, 43, 130, 11, 55, 99, 134, 122, 6, 15, 63, 130, 43, 131, 126, 129, 114, 128, 13, 74, 46, 128, 79, 127, 128, 75, 128, 19, 128, 57, 89, 21, 128, 94, 58, 129, 30, 49, 58, 47, 95, 91, 11, 115, 56, 25, 56, 128, 52, 33, 49, 93, 82, 126, 128, 65, 109, 118, 111, 75, 25, 121, 89, 24, 61, 12, 92, 29, 84, 128, 78, 129, 1, 54, 54, 3, 77, 67, 128, 2, 128, 25, 85, 28, 57, 28, 78, 89, 105, 101, 93, 83, 45, 11, 99, 34, 121, 45, 44, 81, 113, 94, 49, 20, 57, 89, 61,
                                                      //Frame:29 bytes before:3297
                                                      129, 15, 7, 128, 51, 91, 128, 107, 75, 130, 23, 131, 22, 39, 128, 70, 128, 127, 128, 107, 99, 107, 19, 23, 55, 128, 62, 128, 74, 82, 119, 128, 98, 30, 47, 95, 128, 59, 35, 11, 128, 115, 69, 129, 78, 126, 128, 10, 78, 126, 65, 122, 111, 63, 27, 128, 19, 88, 40, 8, 72, 44, 62, 81, 37, 66, 128, 2, 128, 77, 86, 95, 11, 129, 116, 92, 57, 9, 28, 105, 129, 105, 44, 108, 128, 13, 118, 66, 101, 3, 3, 25, 121, 128, 2, 29, 20, 5, 5, 28, 28, 2, 89, 73, 42, 103, 11, 89, 69, 9, 128, 76, 44, 22, 81, 81, 5, 121, 57,
                                                      //Frame:30 bytes before:3416
                                                      128, 14, 79, 103, 128, 43, 131, 19, 119, 23, 130, 78, 126, 128, 50, 110, 54, 79, 128, 27, 75, 129, 87, 131, 38, 128, 26, 23, 42, 66, 126, 111, 63, 123, 27, 130, 87, 29, 131, 102, 85, 46, 62, 110, 86, 31, 91, 75, 115, 128, 116, 129, 104, 128, 6, 29, 42, 110, 102, 65, 26, 118, 111, 75, 115, 60, 128, 4, 28, 33, 41, 61, 84, 40, 28, 121, 128, 12, 54, 54, 47, 125, 114, 128, 2, 128, 25, 5, 105, 57, 121, 53, 28, 20, 101, 93, 61, 45, 11, 18, 34, 128, 37, 44, 128, 12, 12, 6, 61, 57, 53, 61,
                                                      128,/*skip:1 last*/

                                                      //Frame:31 bytes before:3529
                                                      100, 37, 128, 18, 86, 128, 27, 129, 11, 128, 35, 132, 12, 39, 117, 94, 118, 95, 123, 129, 11, 11, 132, 97, 82, 18, 26, 74, 46, 22, 79, 127, 128, 75, 99, 128, 87, 128, 89, 21, 128, 94, 58, 128, 53, 30, 54, 58, 47, 63, 27, 11, 128, 119, 40, 8, 72, 88, 62, 81, 93, 82, 126, 10, 128, 109, 15, 95, 11, 51, 121, 116, 24, 61, 12, 92, 29, 60, 128, 78, 17, 128, 1, 13, 118, 83, 101, 3, 128, 25, 129, 117, 28, 128, 5, 78, 105, 28, 85, 89, 125, 42, 103, 43, 93, 121, 29, 121, 81, 113, 62, 9, 105, 128, 69, 128, 125,
                                                      //Frame:32 bytes before:3646
                                                      4, 18, 119, 15, 51, 91, 91, 107, 75, 134, 46, 22, 129, 62, 15, 63, 128, 107, 35, 43, 19, 130, 55, 113, 74, 66, 23, 13, 98, 30, 47, 95, 123, 59, 115, 132, 4, 78, 129, 10, 78, 126, 65, 22, 31, 127, 75, 128, 19, 15, 130, 44, 6, 57, 37, 66, 102, 54, 26, 42, 111, 75, 128, 87, 128, 32, 92, 121, 9, 28, 105, 128, 5, 41, 44, 12, 54, 54, 47, 128, 114, 114, 66, 124, 124, 40, 2, 20, 25, 53, 28, 121, 101, 93, 61, 128, 67, 58, 98, 121, 28, 105, 81, 128, 44, 70, 61, 57, 89, 125,
                                                      129,/*skip:2 last*/

                                                      //Frame:33 bytes before:3757
                                                      69, 35, 26, 134, 55, 119, 131, 76, 128, 50, 78, 38, 128, 127, 27, 128, 99, 130, 83, 23, 128, 38, 106, 77, 128, 42, 66, 126, 111, 63, 128, 107, 35, 131, 21, 21, 128, 126, 102, 85, 46, 62, 110, 47, 63, 27, 11, 128, 55, 55, 56, 72, 104, 108, 128, 29, 42, 105, 128, 65, 109, 15, 95, 128, 87, 23, 116, 128, 28, 33, 41, 69, 20, 52, 76, 17, 108, 1, 45, 118, 83, 23, 117, 117, 78, 60, 60, 5, 121, 17, 28, 78, 89, 128, 85, 89, 125, 45, 7, 106, 105, 128, 37, 108, 128, 38, 12, 73, 20, 128, 69, 128, 125, 61,
                                                      //Frame:34 bytes before:3871
                                                      106, 128, 18, 86, 43, 27, 130, 115, 133, 61, 73, 85, 94, 54, 79, 123, 128, 115, 128, 107, 87, 128, 87, 128, 23, 1, 98, 18, 26, 74, 110, 22, 31, 127, 128, 19, 130, 83, 128, 4, 128, 94, 58, 10, 53, 30, 54, 58, 111, 127, 75, 99, 128, 115, 19, 72, 128, 120, 22, 49, 105, 82, 126, 54, 77, 65, 111, 127, 11, 128, 87, 96, 24, 89, 125, 92, 61, 60, 56, 78, 128, 81, 54, 54, 47, 131, 60, 128, 84, 53, 28, 121, 69, 14, 28, 37, 93, 61, 129, 70, 98, 121, 128, 29, 1, 29, 17, 97, 105, 57, 89, 125,
                                                      130,/*skip:3 last*/

                                                      //Frame:35 bytes before:3984
                                                      99, 26, 128, 55, 91, 91, 128, 75, 11, 19, 130, 26, 129, 1, 26, 117, 62, 118, 63, 131, 115, 131, 87, 42, 77, 23, 13, 98, 30, 47, 95, 123, 27, 87, 129, 87, 87, 128, 68, 78, 126, 30, 128, 46, 33, 65, 86, 95, 27, 128, 87, 19, 55, 51, 128, 104, 108, 6, 125, 37, 66, 38, 65, 128, 15, 31, 75, 87, 119, 51, 32, 92, 92, 41, 128, 105, 20, 5, 41, 108, 1, 45, 118, 83, 119, 83, 53, 78, 129, 60, 78, 89, 84, 14, 121, 121, 50, 128, 125, 45, 50, 51, 34, 84, 28, 105, 49, 125, 81, 118, 61, 128, 28, 130, 1,
                                                      //Frame:36 bytes before:4099
                                                      128, 77, 15, 106, 129, 107, 128, 115, 131, 23, 26, 129, 50, 78, 38, 15, 127, 27, 107, 129, 19, 131, 11, 82, 101, 128, 42, 66, 62, 111, 63, 131, 87, 128, 23, 128, 21, 94, 128, 102, 53, 30, 38, 110, 111, 63, 128, 35, 11, 51, 19, 11, 128, 64, 97, 34, 29, 101, 9, 54, 58, 13, 111, 63, 115, 128, 87, 43, 128, 89, 37, 116, 69, 76, 8, 76, 92, 130, 47, 128, 55, 103, 14, 72, 128, 84, 5, 121, 17, 57, 128, 89, 57, 117, 125, 128, 77, 117, 115, 25, 128, 69, 33, 125, 29, 97, 73, 76, 132, 73,
                                                      //Frame:37 bytes before:4209
                                                      66, 26, 122, 43, 27, 129, 11, 131, 119, 119, 119, 119, 90, 85, 94, 54, 79, 123, 129, 35, 128, 87, 129, 23, 129, 98, 18, 26, 106, 110, 70, 31, 127, 128, 107, 130, 23, 87, 115, 78, 129, 10, 46, 113, 54, 22, 31, 27, 75, 128, 19, 128, 51, 43, 128, 24, 22, 105, 105, 50, 38, 65, 102, 58, 31, 75, 87, 83, 51, 71, 24, 116, 29, 92, 61, 94, 72, 29, 25, 81, 45, 118, 31, 23, 51, 39, 44, 44, 84, 128, 76, 128, 25, 128, 60, 121, 5, 93, 128, 45, 50, 105, 34, 92, 124, 89, 6, 29, 85, 128, 34, 57, 121, 125, 129, 1, 41,
                                                      //Frame:38 bytes before:4326
                                                      13, 18, 86, 27, 129, 75, 131, 55, 130, 55, 77, 117, 62, 18, 95, 131, 11, 129, 23, 128, 87, 115, 101, 23, 77, 82, 30, 47, 95, 123, 27, 19, 128, 119, 129, 115, 43, 46, 62, 49, 85, 128, 44, 65, 47, 95, 128, 115, 115, 128, 11, 75, 91, 52, 28, 83, 125, 61, 66, 12, 110, 77, 55, 63, 129, 87, 43, 7, 128, 92, 2, 60, 128, 49, 44, 41, 60, 33, 128, 47, 83, 55, 7, 77, 108, 128, 44, 44, 113, 89, 121, 105, 121, 128, 50, 130, 117, 57, 41, 25, 25, 92, 34, 93, 93, 106, 12, 128, 14, 130, 73, 28,
                                                      //Frame:39 bytes before:4438
                                                      129, 106, 91, 91, 129, 87, 129, 23, 128, 55, 55, 55, 128, 50, 78, 38, 15, 127, 27, 128, 19, 130, 23, 130, 43, 128, 26, 101, 66, 62, 111, 63, 130, 55, 128, 119, 87, 128, 91, 76, 128, 10, 78, 30, 97, 58, 111, 127, 132, 43, 71, 116, 37, 34, 29, 5, 2, 54, 102, 65, 111, 127, 11, 11, 128, 91, 103, 116, 5, 40, 28, 12, 130, 81, 12, 90, 111, 87, 51, 39, 109, 81, 129, 108, 84, 128, 108, 84, 89, 57, 117, 61, 45, 109, 93, 105, 24, 129, 97, 41, 89, 69, 26, 57, 128, 61, 128, 45, 45, 9, 121,
                                                      //Frame:40 bytes before:4549
                                                      74, 122, 51, 129, 107, 11, 51, 107, 132, 83, 51, 85, 94, 54, 79, 123, 128, 107, 129, 87, 131, 51, 128, 18, 109, 42, 128, 70, 31, 127, 27, 107, 87, 128, 87, 87, 51, 43, 127, 12, 1, 85, 46, 113, 54, 86, 31, 128, 107, 128, 75, 35, 75, 91, 128, 24, 42, 2, 105, 50, 17, 65, 128, 58, 31, 75, 87, 87, 43, 71, 13, 96, 21, 128, 57, 33, 44, 12, 14, 57, 45, 22, 83, 23, 19, 13, 9, 84, 81, 124, 81, 121, 25, 57, 128, 92, 5, 78, 125, 129, 57, 76, 128, 124, 116, 74, 28, 14, 128, 34, 49, 105, 125, 129, 58, 121, 84,
                                                      //Frame:41 bytes before:4666
                                                      18, 86, 43, 135, 83, 83, 83, 51, 43, 117, 62, 18, 95, 132, 23, 23, 129, 87, 11, 99, 119, 128, 114, 94, 47, 95, 27, 131, 55, 55, 129, 123, 1, 49, 128, 30, 17, 90, 47, 63, 27, 129, 11, 11, 115, 127, 7, 92, 74, 69, 130, 110, 54, 86, 63, 131, 7, 128, 40, 78, 76, 81, 62, 17, 29, 46, 61, 128, 47, 129, 7, 45, 14, 121, 57, 121, 57, 25, 129, 17, 129, 125, 130, 20, 57, 128, 24, 24, 2, 129, 101, 2, 57, 76, 130, 73, 28, 81,
                                                      //Frame:42 bytes before:4764
                                                      128, 119, 27, 129, 75, 134, 51, 107, 128, 78, 38, 15, 63, 91, 129, 115, 133, 99, 27, 26, 101, 82, 62, 111, 63, 129, 115, 129, 87, 87, 128, 91, 129, 125, 78, 113, 128, 66, 111, 127, 128, 115, 128, 87, 128, 43, 123, 128, 69, 82, 128, 12, 69, 37, 102, 65, 47, 43, 115, 129, 91, 103, 65, 5, 94, 12, 61, 6, 128, 9, 76, 33, 128, 111, 19, 51, 39, 90, 76, 28, 41, 28, 105, 128, 92, 41, 116, 28, 117, 128, 45, 109, 93, 105, 20, 88, 88, 5, 128, 61, 121, 114, 61, 130, 45, 128, 9, 121, 121,
                                                      //Frame:43 bytes before:4873
                                                      15, 106, 91, 128, 59, 128, 87, 43, 129, 87, 19, 87, 115, 129, 94, 54, 79, 127, 27, 129, 55, 133, 35, 91, 109, 128, 66, 70, 31, 127, 129, 19, 128, 87, 129, 43, 123, 59, 90, 61, 30, 17, 37, 86, 31, 128, 99, 19, 128, 11, 115, 128, 59, 103, 101, 66, 61, 57, 21, 45, 128, 58, 111, 107, 129, 51, 59, 39, 109, 76, 113, 57, 125, 34, 128, 105, 128, 1, 118, 31, 87, 129, 73, 37, 12, 25, 37, 121, 129, 121, 25, 121, 78, 130, 125, 28, 8, 60, 0, 128, 25, 20, 89, 50, 29, 105, 46, 129, 58, 105, 89, 25,
                                                      //Frame:44 bytes before:4985
                                                      86, 99, 133, 91, 128, 51, 129, 43, 128, 107, 62, 65, 130, 107, 11, 133, 35, 43, 128, 93, 128, 110, 118, 95, 91, 128, 107, 131, 51, 27, 128, 71, 73, 53, 113, 128, 42, 118, 95, 91, 129, 11, 115, 128, 91, 71, 39, 114, 78, 128, 89, 129, 54, 86, 31, 130, 43, 71, 13, 39, 94, 128, 9, 97, 41, 37, 76, 12, 128, 47, 83, 128, 19, 73, 9, 90, 9, 92, 89, 84, 116, 130, 61, 93, 130, 61, 57, 72, 128, 40, 53, 60, 57, 92, 85, 128, 61, 45, 129, 90, 76, 61, 116,
                                                      //Frame:45 bytes before:5088
                                                      131, 27, 115, 51, 128, 107, 87, 128, 115, 51, 129, 91, 70, 15, 95, 91, 131, 119, 119, 128, 119, 119, 115, 107, 127, 89, 18, 86, 111, 63, 128, 99, 131, 83, 35, 43, 129, 9, 46, 38, 85, 58, 47, 63, 27, 130, 11, 11, 129, 26, 117, 61, 121, 128, 78, 102, 65, 47, 19, 129, 115, 130, 109, 62, 81, 41, 42, 131, 45, 129, 23, 7, 90, 113, 73, 129, 29, 129, 29, 128, 40, 5, 105, 128, 90, 93, 121, 20, 128, 124, 56, 128, 28, 128, 28, 2, 93, 33, 73, 45, 128, 73, 57, 89, 96,
                                                      //Frame:46 bytes before:5193
                                                      103, 136, 115, 132, 90, 128, 63, 131, 19, 55, 128, 119, 128, 55, 128, 63, 123, 21, 128, 70, 79, 127, 27, 131, 83, 87, 11, 91, 129, 45, 126, 10, 53, 90, 111, 127, 75, 128, 87, 87, 87, 43, 123, 128, 122, 128, 57, 89, 25, 46, 10, 58, 111, 115, 115, 35, 128, 91, 7, 129, 6, 33, 89, 106, 60, 61, 44, 1, 128, 111, 19, 51, 129, 33, 9, 41, 128, 78, 128, 40, 128, 57, 14, 53, 61, 45, 128, 61, 105, 44, 44, 44, 44, 14, 128, 84, 5, 128, 125, 128, 45, 125, 128, 9, 121, 25,
                                                      128,/*skip:1 last*/

                                                      //Frame:47 bytes before:5300
                                                      134, 107, 75, 128, 107, 19, 128, 27, 43, 128, 26, 31, 127, 128, 107, 75, 130, 23, 128, 55, 128, 51, 127, 129, 122, 118, 95, 59, 132, 87, 131, 7, 9, 70, 85, 46, 86, 31, 59, 130, 11, 130, 7, 13, 78, 128, 25, 40, 126, 54, 128, 31, 129, 55, 130, 97, 50, 39, 37, 69, 82, 76, 29, 12, 128, 90, 31, 129, 103, 73, 97, 49, 0, 60, 105, 129, 121, 20, 60, 125, 129, 73, 128, 57, 108, 124, 84, 108, 44, 128, 20, 128, 69, 69, 12, 125, 45, 128, 41, 89, 52, 112,
                                                      //Frame:48 bytes before:5402
                                                      130, 123, 129, 115, 129, 51, 129, 11, 107, 129, 118, 95, 91, 133, 55, 55, 128, 51, 63, 91, 128, 46, 86, 15, 63, 128, 75, 129, 87, 130, 43, 128, 91, 128, 1, 128, 53, 126, 55, 95, 131, 87, 51, 131, 61, 89, 92, 76, 102, 65, 86, 130, 115, 132, 34, 29, 28, 66, 130, 97, 22, 83, 129, 39, 128, 90, 128, 40, 121, 76, 129, 105, 128, 28, 14, 132, 12, 25, 129, 81, 69, 129, 14, 93, 130, 22, 105, 121, 116, 32,
                                                      //Frame:49 bytes before:5492
                                                      130, 91, 11, 87, 43, 128, 11, 129, 115, 115, 128, 107, 128, 15, 63, 131, 115, 128, 19, 131, 107, 129, 76, 70, 79, 127, 130, 11, 132, 27, 59, 128, 97, 98, 78, 62, 15, 63, 128, 115, 128, 99, 129, 91, 59, 128, 34, 81, 116, 40, 129, 58, 47, 63, 11, 129, 51, 59, 39, 13, 128, 9, 128, 37, 128, 12, 128, 1, 45, 129, 87, 131, 8, 8, 57, 12, 20, 104, 129, 121, 61, 125, 90, 13, 128, 89, 1, 116, 25, 33, 84, 89, 84, 93, 28, 105, 1, 129, 90, 57, 28, 96, 5,
                                                      //Frame:50 bytes before:5595
                                                      130, 27, 130, 75, 128, 43, 129, 43, 128, 91, 128, 111, 127, 135, 19, 83, 43, 91, 129, 126, 83, 95, 123, 27, 134, 11, 130, 42, 34, 46, 70, 79, 127, 129, 35, 35, 130, 123, 103, 13, 89, 40, 76, 33, 54, 122, 111, 130, 19, 43, 128, 103, 129, 89, 105, 5, 2, 130, 90, 47, 51, 128, 19, 128, 13, 77, 128, 72, 81, 128, 49, 5, 41, 84, 128, 57, 129, 9, 129, 9, 128, 92, 57, 121, 129, 121, 129, 6, 131, 121, 16, 28,
                                                      //Frame:51 bytes before:5687
                                                      132, 51, 107, 128, 87, 134, 31, 91, 130, 11, 43, 107, 128, 83, 83, 51, 107, 130, 38, 118, 63, 129, 115, 35, 136, 106, 66, 94, 118, 31, 133, 115, 128, 59, 128, 93, 25, 128, 113, 128, 65, 86, 128, 127, 87, 87, 51, 128, 71, 39, 128, 53, 121, 20, 129, 29, 105, 45, 128, 111, 129, 71, 90, 128, 97, 113, 44, 128, 33, 130, 44, 128, 105, 45, 128, 105, 128, 92, 128, 0, 128, 29, 84, 25, 108, 84, 128, 61, 102, 129, 73, 128, 57, 56,
                                                      128,/*skip:1 last*/

                                                      //Frame:52 bytes before:5782
                                                      130, 75, 132, 91, 133, 63, 130, 75, 131, 51, 128, 115, 91, 130, 74, 15, 127, 131, 99, 131, 43, 91, 130, 78, 62, 47, 95, 123, 27, 129, 87, 128, 43, 131, 40, 94, 128, 97, 110, 128, 31, 27, 128, 19, 19, 130, 9, 14, 130, 29, 61, 110, 102, 118, 31, 115, 19, 128, 26, 45, 129, 81, 57, 22, 41, 33, 17, 128, 61, 61, 130, 105, 28, 41, 32, 129, 52, 130, 121, 33, 10, 129, 9, 84, 20, 8, 121,
                                                      //Frame:53 bytes before:5869
                                                      129, 27, 132, 51, 130, 91, 130, 127, 132, 107, 130, 115, 132, 18, 79, 130, 19, 129, 23, 23, 23, 132, 114, 94, 70, 111, 63, 131, 115, 119, 128, 123, 128, 39, 125, 46, 113, 17, 129, 47, 95, 128, 51, 133, 20, 128, 84, 69, 17, 129, 109, 130, 51, 7, 128, 109, 129, 33, 89, 130, 92, 132, 61, 128, 37, 130, 89, 128, 116, 28, 130, 45, 45, 129, 121, 128, 72,
                                                      128,/*skip:1 last*/

                                                      //Frame:54 bytes before:5947
                                                      130, 11, 129, 75, 130, 27, 43, 131, 27, 131, 51, 129, 87, 129, 43, 129, 123, 129, 31, 123, 27, 137, 123, 128, 82, 62, 118, 79, 127, 129, 87, 128, 87, 87, 131, 5, 94, 129, 54, 86, 111, 63, 130, 51, 130, 73, 44, 129, 89, 89, 65, 102, 54, 22, 95, 130, 90, 73, 128, 49, 12, 132, 81, 131, 125, 129, 52, 128, 28, 105, 129, 57, 129, 37, 10, 130, 105, 128, 44,
                                                      128,/*skip:1 last*/

                                                      //Frame:55 bytes before:6027
                                                      128, 35, 130, 43, 128, 115, 129, 107, 128, 27, 91, 135, 43, 129, 115, 129, 27, 130, 15, 95, 129, 107, 129, 87, 130, 51, 131, 117, 129, 95, 128, 27, 107, 128, 55, 131, 71, 129, 62, 17, 85, 65, 22, 137, 108, 128, 25, 4, 128, 110, 128, 65, 15, 83, 11, 129, 13, 131, 28, 83, 92, 12, 137, 112, 121, 128, 84, 4, 131, 93, 125, 128, 105, 128, 84, 17, 25,
                                                      //Frame:56 bytes before:6104
                                                      129, 99, 87, 115, 75, 129, 43, 129, 107, 131, 43, 129, 27, 115, 131, 107, 133, 79, 63, 131, 115, 35, 129, 119, 115, 128, 127, 129, 122, 70, 79, 128, 123, 138, 6, 128, 21, 122, 118, 31, 127, 75, 128, 87, 128, 91, 129, 6, 128, 25, 4, 128, 28, 130, 47, 19, 115, 131, 69, 105, 29, 130, 61, 14, 130, 90, 73, 105, 20, 101, 129, 57, 76, 129, 89, 81, 92, 128, 125, 45, 77, 128, 28, 44, 124,
                                                      128,/*skip:1 last*/

                                                      //Frame:57 bytes before:6190
                                                      7, 130, 51, 11, 107, 19, 130, 43, 137, 91, 128, 51, 130, 91, 130, 31, 127, 91, 132, 119, 119, 129, 107, 123, 129, 86, 118, 128, 63, 27, 129, 19, 134, 14, 128, 85, 14, 129, 95, 27, 107, 128, 19, 131, 34, 12, 129, 40, 76, 102, 54, 58, 111, 128, 87, 131, 17, 17, 128, 37, 82, 60, 29, 130, 1, 129, 61, 129, 8, 80, 128, 12, 128, 40, 17, 84, 134, 113, 25, 116,
                                                      //Frame:58 bytes before:6270
                                                      138, 91, 133, 123, 129, 115, 128, 75, 134, 59, 95, 123, 132, 119, 129, 55, 128, 63, 132, 95, 127, 130, 87, 128, 55, 51, 131, 49, 34, 21, 46, 128, 47, 137, 1, 4, 40, 128, 126, 131, 75, 132, 21, 92, 129, 66, 129, 76, 57, 128, 61, 131, 29, 128, 40, 81, 81, 20, 128, 121, 25, 128, 101, 129, 101, 125, 57, 12, 128, 4,
                                                      //Frame:59 bytes before:6340
                                                      129, 82, 131, 115, 27, 130, 107, 135, 43, 107, 136, 63, 130, 75, 11, 128, 55, 131, 127, 130, 70, 15, 132, 19, 87, 87, 134, 78, 126, 86, 111, 63, 128, 11, 128, 51, 43, 130, 9, 130, 76, 128, 97, 65, 86, 31, 128, 19, 43, 129, 6, 25, 128, 20, 129, 76, 129, 61, 125, 1, 132, 72, 8, 61, 61, 49, 56, 105, 121, 131, 50, 61, 129, 116,
                                                      128,/*skip:1 last*/

                                                      //Frame:60 bytes before:6415
                                                      19, 119, 128, 23, 87, 134, 27, 130, 99, 129, 75, 11, 131, 59, 131, 91, 128, 127, 91, 128, 107, 129, 19, 128, 55, 55, 128, 95, 131, 74, 79, 63, 59, 128, 99, 135, 7, 129, 46, 62, 128, 79, 127, 136, 45, 40, 8, 72, 102, 131, 11, 87, 131, 40, 129, 5, 2, 131, 110, 131, 44, 129, 72, 93, 33, 128, 104, 128, 84, 60, 50, 132, 1, 128, 64,
                                                      //Frame:61 bytes before:6490
                                                      130, 82, 130, 43, 131, 107, 27, 131, 27, 11, 87, 128, 27, 11, 43, 129, 91, 131, 91, 131, 115, 132, 63, 91, 130, 18, 31, 127, 128, 75, 129, 87, 135, 2, 94, 70, 118, 95, 128, 75, 129, 87, 11, 123, 128, 103, 105, 101, 8, 72, 44, 128, 54, 58, 47, 129, 55, 131, 104, 28, 84, 129, 12, 128, 57, 12, 125, 132, 93, 44, 44, 130, 124, 128, 20, 128, 85, 130, 57, 61, 9, 96, 120,
                                                      //Frame:62 bytes before:6573
                                                      129, 50, 129, 115, 43, 129, 27, 27, 128, 91, 134, 115, 128, 75, 130, 107, 139, 19, 129, 19, 43, 131, 15, 95, 133, 83, 128, 115, 129, 59, 128, 6, 105, 62, 128, 15, 128, 59, 130, 11, 131, 93, 130, 108, 128, 65, 129, 63, 128, 87, 131, 8, 130, 29, 129, 44, 33, 128, 65, 130, 81, 128, 81, 108, 89, 97, 129, 57, 84, 128, 93, 131, 93,
                                                      130,/*skip:3 last*/

                                                      //Frame:63 bytes before:6647
                                                      133, 75, 132, 107, 129, 27, 152, 19, 51, 133, 63, 123, 27, 129, 11, 128, 87, 128, 51, 132, 94, 128, 118, 79, 63, 130, 87, 132, 105, 128, 72, 44, 33, 54, 128, 22, 111, 132, 109, 128, 72, 76, 128, 69, 128, 57, 128, 81, 129, 1, 131, 89, 121, 61, 121, 128, 41, 128, 49, 20, 128, 53, 129, 109, 128, 89, 129, 32,
                                                      //Frame:64 bytes before:6715
                                                      128, 26, 109, 50, 23, 130, 107, 131, 75, 27, 129, 27, 75, 129, 107, 128, 115, 127, 133, 123, 129, 59, 128, 11, 128, 107, 128, 83, 129, 91, 131, 79, 127, 129, 107, 35, 131, 87, 133, 70, 134, 87, 51, 132, 44, 17, 97, 128, 58, 135, 54, 129, 116, 89, 25, 61, 129, 1, 128, 22, 129, 1, 128, 25, 89, 128, 92, 42, 129, 41, 128, 28, 131, 29, 69, 128, 16, 40,
                                                      //Frame:65 bytes before:6793
                                                      87, 130, 82, 51, 128, 107, 128, 75, 129, 91, 151, 43, 129, 51, 128, 115, 131, 71, 31, 132, 99, 136, 62, 128, 15, 31, 127, 130, 51, 11, 43, 131, 69, 17, 116, 37, 65, 128, 47, 31, 127, 115, 55, 130, 118, 44, 12, 128, 4, 129, 61, 61, 133, 57, 128, 25, 28, 128, 106, 128, 57, 128, 84, 129, 37, 129, 61, 89, 128, 8,
                                                      128,/*skip:1 last*/

                                                      //Frame:66 bytes before:6864
                                                      136, 27, 129, 107, 128, 75, 75, 35, 128, 11, 132, 91, 91, 132, 91, 130, 75, 139, 95, 123, 137, 91, 128, 71, 83, 70, 118, 79, 95, 129, 115, 128, 23, 87, 130, 83, 9, 21, 128, 4, 42, 110, 90, 129, 75, 128, 87, 129, 58, 66, 81, 1, 4, 128, 92, 128, 14, 128, 125, 45, 47, 130, 105, 116, 4, 128, 60, 129, 121, 129, 57, 14, 125, 133, 72,
                                                      //Frame:67 bytes before:6939
                                                      131, 50, 67, 11, 43, 128, 75, 107, 128, 27, 128, 99, 99, 128, 99, 129, 51, 75, 107, 132, 27, 129, 123, 136, 115, 133, 63, 128, 91, 129, 115, 129, 23, 23, 130, 123, 130, 15, 129, 123, 123, 128, 35, 51, 130, 59, 19, 128, 5, 89, 130, 22, 111, 95, 128, 19, 115, 133, 32, 40, 25, 128, 46, 129, 1, 129, 6, 128, 61, 131, 114, 130, 44, 133, 121, 2, 72, 44,
                                                      //Frame:68 bytes before:7017
                                                      88, 0, 64, 64, 64, 88, 124, 60, 121, 57, 89, 116, 56, 108, 1, 90, 25, 116, 0, 64, 64, 64, 88, 124, 121, 69, 125, 93, 116, 16, 16, 108, 121, 121, 116, 96, 16, 80, 80, 120, 124, 60, 113, 81, 57, 116, 16, 64, 61, 125, 89, 116, 96, 112, 32, 4, 4, 100, 80, 16, 60, 52, 64, 24, 61, 125, 125, 89, 116, 96, 88, 121, 56, 104, 96, 24, 84, 0, 24, 69, 61, 125, 45, 93, 89, 116, 88, 60, 52, 24, 116, 69, 20, 0, 28, 77, 61, 125, 45, 77, 109, 109, 89, 25, 121, 69, 101, 77, 20, 88, 28, 26, 121, 61, 45, 77, 26, 26, 26, 77, 77, 77, 26, 13, 52, 64, 28, 77,
                                                      //Frame:69 bytes before:7145
                                                      220, 88, 156, 9, 128, 88, 128, 13,
                                                      //Frame:70 bytes before:7153
                                                      157, 120, 160, 125, 143, 45, 134, 124, 148, 13,
                                                      143,/*skip:16 last*/

                                                      //Frame:71 bytes before:7164
                                                      137, 25, 143, 89, 168, 16, 124, 144, 116, 139, 93, 128, 121, 130, 13, 52, 128, 37, 140, 0,
                                                      130,/*skip:3 last*/

                                                      //Frame:72 bytes before:7185
                                                      138, 0, 130, 26, 146, 16, 147, 68, 162, 84, 160, 37,
                                                      128,/*skip:1 last*/

                                                      //Frame:73 bytes before:7198
                                                      158, 12, 136, 76, 129, 121, 0, 128, 88, 138, 64, 133, 93, 132, 8, 132, 92, 138, 4,
                                                      164,/*skip:37 last*/

                                                      //Frame:74 bytes before:7218
                                                      144, 0, 166, 36, 140, 20,
                                                      183,/*skip:56 last*/

                                                      //Frame:75 bytes before:7225
                                                      145, 64, 142, 0, 137, 96, 142, 0, 157, 52, 129, 13,
                                                      159,/*skip:32 last*/

                                                      //Frame:76 bytes before:7238
                                                      155, 96, 147, 93, 25, 135, 120, 134, 25, 136, 88, 129, 125, 131, 0, 132, 93, 129, 69, 150, 77, 135, 9,
                                                      //Frame:77 bytes before:7261
                                                      0, 151, 125, 134, 25, 137, 84, 145, 92, 137, 16, 131, 125, 131, 25, 136, 37, 134, 25, 131, 9, 128, 124, 128, 9, 128, 125, 136, 105, 64,
                                                      130,/*skip:3 last*/

                                                      //Frame:78 bytes before:7292
                                                      141, 90, 133, 88, 141, 80, 130, 60, 138, 112, 134, 121, 134, 0, 134, 52, 147, 45, 77,
                                                      156,/*skip:29 last*/

                                                      //Frame:79 bytes before:7312
                                                      131, 88, 131, 89, 148, 1, 143, 125, 138, 84, 141, 92, 133, 109, 152, 0, 139, 26, 128, 20, 128, 124, 45,
                                                      128,/*skip:1 last*/

                                                      //Frame:80 bytes before:7336
                                                      139, 72, 12, 140, 25, 142, 57, 151, 96, 64, 145, 0, 128, 92, 140, 89, 132, 45, 128, 61,
                                                      142,/*skip:15 last*/

                                                      //Frame:81 bytes before:7357
                                                      128, 64, 151, 57, 144, 25, 129, 124, 130, 0, 132, 96, 139, 121, 129, 64, 142, 84, 129, 0, 124, 129, 125, 129, 109, 133, 77,
                                                      148,/*skip:21 last*/

                                                      //Frame:82 bytes before:7385
                                                      134, 121, 132, 33, 135, 124, 130, 93, 134, 64, 145, 32, 130, 16, 130, 64, 143, 28, 135, 84, 24, 133, 9, 132, 89, 135, 77, 131, 26, 138, 105,
                                                      //Frame:83 bytes before:7416
                                                      138, 56, 131, 116, 133, 60, 129, 57, 130, 108, 153, 80, 16, 124, 129, 88, 135, 84, 129, 32, 146, 101, 139, 105,
                                                      147,/*skip:20 last*/

                                                      //Frame:84 bytes before:7441
                                                      137, 116, 128, 120, 140, 93, 134, 96, 134, 81, 128, 116, 16, 64, 131, 96, 129, 4, 141, 120, 128, 8, 141, 124, 129, 52, 146, 92, 128, 105, 137, 13, 52, 128, 92,
                                                      129,/*skip:2 last*/

                                                      //Frame:85 bytes before:7477
                                                      135, 57, 141, 121, 130, 116, 132, 116, 134, 113, 134, 89, 139, 24, 130, 89, 116, 132, 96, 128, 121, 0, 133, 89, 116, 64, 148, 20, 88, 144, 77,
                                                      128,/*skip:1 last*/

                                                      //Frame:86 bytes before:7509
                                                      140, 12, 168, 96, 134, 28, 148, 88, 128, 52, 130, 89, 128, 92, 133, 93, 135, 28, 26, 20, 132, 77, 134, 28,
                                                      129,/*skip:2 last*/

                                                      //Frame:87 bytes before:7534
                                                      132, 124, 134, 1, 137, 69, 141, 88, 134, 60, 129, 116, 132, 100, 130, 52, 135, 88, 135, 69, 130, 93, 134, 28, 20, 129, 77, 132, 109, 139, 45, 77,
                                                      140,/*skip:13 last*/

                                                      //Frame:88 bytes before:7567
                                                      133, 60, 148, 16, 129, 90, 133, 120, 147, 60, 142, 84, 128, 24, 135, 60, 129, 116, 69, 136, 93, 131, 101, 148, 84,
                                                      //Frame:89 bytes before:7592
                                                      139, 108, 140, 89, 139, 124, 155, 16, 130, 104, 128, 24, 139, 116, 134, 105, 135, 69,
                                                      150,/*skip:23 last*/

                                                      //Frame:90 bytes before:7611
                                                      136, 25, 0, 145, 64, 131, 16, 161, 124, 137, 45, 134, 124, 130, 88, 28, 135, 121, 146, 9, 128, 88, 128, 13,
                                                      128,/*skip:1 last*/

                                                      //Frame:91 bytes before:7636
                                                      143, 0, 153, 121, 130, 28, 142, 69, 128, 93, 167, 13, 52, 142, 0,
                                                      131,/*skip:4 last*/

                                                      //Frame:92 bytes before:7652
                                                      144, 64, 138, 120, 130, 0, 148, 32, 162, 84, 137, 60, 133, 37, 13,
                                                      144,/*skip:17 last*/

                                                      //Frame:93 bytes before:7668
                                                      157, 12, 136, 76, 130, 0, 128, 88, 129, 25, 133, 36, 128, 64, 134, 25, 130, 20, 72, 139, 0, 131, 4, 132, 20, 133, 121, 135, 52, 140, 37,
                                                      129,/*skip:2 last*/

                                                      //Frame:94 bytes before:7700
                                                      141, 26, 144, 25, 142, 93, 136, 120, 151, 25,
                                                      171,/*skip:44 last*/

                                                      //Frame:95 bytes before:7711
                                                      162, 80, 151, 0, 133, 0, 136, 92, 140, 52, 136, 25, 137, 125,
                                                      142,/*skip:15 last*/

                                                      //Frame:96 bytes before:7726
                                                      64, 150, 125, 146, 96, 133, 112, 137, 92, 137, 16, 129, 88, 140, 93, 131, 84,
                                                      159,/*skip:32 last*/

                                                      //Frame:97 bytes before:7744
                                                      154, 96, 142, 84, 130, 61, 160, 109, 141, 45, 77, 152, 64, 129, 9,
                                                      128,/*skip:1 last*/

                                                      //Frame:98 bytes before:7760
                                                      182, 68, 130, 121, 134, 96, 132, 112, 92, 52, 145, 13, 130, 109, 134, 9, 142, 105,
                                                      132,/*skip:5 last*/

                                                      //Frame:99 bytes before:7779
                                                      135, 89, 138, 88, 145, 60, 129, 57, 134, 0, 135, 84, 130, 125, 131, 64, 136, 125, 141, 69, 133, 89, 146, 26,
                                                      134,/*skip:7 last*/
                                                      //b:7804
                                                     };
static const u8 chunk_1[] __attribute__((progmem)) = {69, 83, 36, 45, 6, 43, 74, 26, 98, 108, 21, 32, 60, 106, 111, 63, 61, 87, 83, 14, 46, 16, 52, 26, 38, 51, 104, 105, 79, 81, 115, 15, 91, 64, 96, 102, 97, 92, 9, 20, 12, 28, 122, 40, 41, 65, 48, 3, 82, 27, 105, 17, 57, 109, 121, 93, 1, 33, 77, 62, 5, 117, 39, 38, 67, 59, 85, 105, 73, 74, 12, 76, 101, 113, 88, 8, 117, 56, 38, 110, 7, 118, 59, 27, 24, 80, 100, 53, 68, 125, 114, 72, 44, 99, 58, 42, 35, 23, 54, 13, 34, 29, 10, 2, 70, 103, 30, 47, 25, 107, 126, 11, 86, 71, 37, 127, 31, 55, 55, 4, 95, 19, 78, 84, 25, 75, 94, 22,
                                                      //Frame:1 bytes before:128
                                                      154, 66, 166, 41, 128, 90, 130, 49, 143, 50, 144, 112,
                                                      146,/*skip:19 last*/

                                                      //Frame:2 bytes before:141
                                                      175, 18, 89, 131, 0, 137, 82, 143, 18, 89, 161, 119, 132, 112,
                                                      130,/*skip:3 last*/

                                                      //Frame:3 bytes before:156
                                                      140, 123, 156, 91, 153, 28, 128, 64, 146, 25,
                                                      162,/*skip:35 last*/
                                                      //b:167
                                                     };


const u8 diagram_overlay[] PROGMEM =
{
#include "diagram.raw.h"
};

unsigned char counter = 0;



unsigned char calc_diagram(unsigned char xx, unsigned char yy)
{
  if (yy > tri_size)return 0;
  if (xx < 64)return 0;
  if (xx - 64 < yy)return 63;
  return 0;
  if (yy < 2)return 0;
  u8 x = xx, y = yy;
  if (x - 32 == y)return 63;
  if (x - 33 == y)return 63;
  if (x - 34 == y)return 63;

  return 0;

}


void rotatePoints(const double* points, int numPoints, double angle, double* rotatedPoints) {
  int i;
  double cosAngle = cos(angle);
  double sinAngle = sin(angle);

  for (i = 0; i < numPoints; i += 2) {
    double x = points[i];
    double y = points[i + 1];

    // Apply rotation transformation
    double rotatedX = x * cosAngle - y * sinAngle;
    double rotatedY = x * sinAngle + y * cosAngle;

    rotatedPoints[i] = rotatedX;
    rotatedPoints[i + 1] = rotatedY;
  }
}

static unsigned char calc_diagram2(unsigned char x, unsigned char y)
{
  unsigned char p = counter + x;
  unsigned char h = pgm_read_byte(&sin_tab[p]);
  if (y < h)return 0;
  else
  {
    s16 p = y - h - 4;
    if (p < 0) return 63;
    p *= 2;
    if (p > 63)p = 63;
    return p;
  }
}

double spaceship[] =
{
#define _M 2.5
  0, 0 + _M,        -1, -2 + _M,
  -1, -2 + _M,      -1, -3 + _M,
  -1, -3 + _M,      -1, -4 + _M,
  -1, -4 + _M,      -2, -6 + _M,
  -2, -6 + _M,      -0, -5 + _M,

  0, 0 + _M,      1, -2 + _M,
  1, -2 + _M,      1, -3 + _M,
  1, -3 + _M,      1, -4 + _M,
  1, -4 + _M,      2, -6 + _M,
  2, -6 + _M,      0, -5 + _M,




#define _ASX 5
#define _ASY 5
  0 + _ASX, 0 + _ASY, 1.2 + _ASX, 0.2 + _ASY,
  1.2 + _ASX, 0.2 + _ASY, 1.3 + _ASX, 1 + _ASY,
  1.3 + _ASX, 1 + _ASY, 1.5 + _ASX, 2 + _ASY,
  1.5 + _ASX, 2 + _ASY, -0.2 + _ASX, 1.1 + _ASY,
  -0.2 + _ASX, 1.1 + _ASY, 0 + _ASX, 0 + _ASY,


#define _ASX -5
#define _ASY -1.3
  0 + _ASX, 0 + _ASY, 1.2 + _ASX, 0.2 + _ASY,
  1.2 + _ASX, 0.2 + _ASY, 1.3 + _ASX, 1 + _ASY,
  1.3 + _ASX, 1 + _ASY, 1.5 + _ASX, 2 + _ASY,
  1.5 + _ASX, 2 + _ASY, -0.2 + _ASX, 1.1 + _ASY,
  -0.2 + _ASX, 1.1 + _ASY, 0 + _ASX, 0 + _ASY,


#define _ASX -0.2
#define _ASY 4
  0 + _ASX, 0 + _ASY, 1.2 + _ASX, 0.2 + _ASY,
  1.2 + _ASX, 0.2 + _ASY, 1.3 + _ASX, 1 + _ASY,
  1.3 + _ASX, 1 + _ASY, 1.5 + _ASX, 2 + _ASY,
  1.5 + _ASX, 2 + _ASY, -0.2 + _ASX, 1.1 + _ASY,
  -0.2 + _ASX, 1.1 + _ASY, 0 + _ASX, 0 + _ASY,


};

int draw_mode[]
{
  4, -1  ,
  4, -1  ,
  3, -1  ,
  3, 3  ,
  0, -3  ,

  4, -1  ,
  4, -1  ,
  3, -1  ,
  3, 3  ,
  0, -3  ,


  0, 0,
  4, 2,
  2, -1,
  3, 2,
  0, 0,


  2, -1,
  3, 4,
  0, 0,

  0, 0,
  4, 2,


  4, 2,
  2, -1,
  0, 0,
  4, 4,
  0, 0,


};



typedef struct myPoint {
  double x;
  double y;
} myPoint;
void rotatePoints(myPoint* points, int numPoints, myPoint center, double angle);

void rotatePoints(myPoint* points, int numPoints, myPoint center, double angle)
{
  float sinAngle = sin(angle);
  float cosAngle = cos(angle);

  for (int i = 0; i < numPoints; i++) {
    float translatedX = points[i].x - center.x;
    float translatedY = points[i].y - center.y;

    points[i].x = translatedX * cosAngle - translatedY * sinAngle + center.x;
    points[i].y = translatedX * sinAngle + translatedY * cosAngle + center.y;
  }
}



#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define NUM_OF_INDICES 12
#define SCREEN_CENTER_X  (SCREEN_WIDTH / 2)
#define SCREEN_CENTER_Y  (SCREEN_HEIGHT / 2)
#define OBJ_SCALE (float)2500
#define CAMERA_DISTANCE 15

float objX = 0;
float objY = 0;
float objZ = 10;
float rotationX = .2;
float rotationY = .3;

 const float vertices[] = {
  -1.0f,-1.0f,-1.0f, 
  -1.0f,-1.0f, 1.0f,
  -1.0f, 1.0f, 1.0f, 
  1.0f, 1.0f,-1.0f, 
  -1.0f,-1.0f,-1.0f,
  -1.0f, 1.0f,-1.0f, 
  1.0f,-1.0f, 1.0f,
  -1.0f,-1.0f,-1.0f,
  1.0f,-1.0f,-1.0f,
  1.0f, 1.0f,-1.0f,
  1.0f,-1.0f,-1.0f,
  -1.0f,-1.0f,-1.0f,
  -1.0f,-1.0f,-1.0f,
  -1.0f, 1.0f, 1.0f,
  -1.0f, 1.0f,-1.0f,
  1.0f,-1.0f, 1.0f,
  -1.0f,-1.0f, 1.0f,
  -1.0f,-1.0f,-1.0f,
  -1.0f, 1.0f, 1.0f,
  -1.0f,-1.0f, 1.0f,
  1.0f,-1.0f, 1.0f,
  1.0f, 1.0f, 1.0f,
  1.0f,-1.0f,-1.0f,
  1.0f, 1.0f,-1.0f,
  1.0f,-1.0f,-1.0f,
  1.0f, 1.0f, 1.0f,
  1.0f,-1.0f, 1.0f,
  1.0f, 1.0f, 1.0f,
  1.0f, 1.0f,-1.0f,
  -1.0f, 1.0f,-1.0f,
  1.0f, 1.0f, 1.0f,
  -1.0f, 1.0f,-1.0f,
  -1.0f, 1.0f, 1.0f,
  1.0f, 1.0f, 1.0f,
  -1.0f, 1.0f, 1.0f,
  1.0f,-1.0f, 1.0f
};

static void rotate(float x, float y, float angle,float s,float c, float *r1, float *r2)
{
  *r1 = x * c - y * s;
  *r2 = y * c + x * s;
}
static  const u8 tri_color[12]={// 0,0,0,0,0,0,
50, 63, 40, 63, 50, 40,
40, 50, 50, 63, 63, 40,
                   };
typedef struct triangle
{
  u8 x1,y1,x2,y2,x3,y3,c,z; 
}triangle;

uint16_t sinTable16[] = {
  0,
1145, 2289, 3435, 4572, 5716, 6853, 7989, 9125, 10255, 11385,
12508, 13631, 14745, 15859, 16963, 18067, 19165, 20253, 21342, 22417,
23489, 24553, 25610, 26659, 27703, 28731, 29755, 30773, 31777, 32772,
33756, 34734, 35697, 36649, 37594, 38523, 39445, 40350, 41247, 42131,
42998, 43856, 44701, 45528, 46344, 47147, 47931, 48708, 49461, 50205,
50933, 51646, 52342, 53022, 53686, 54334, 54969, 55579, 56180, 56760,
57322, 57866, 58394, 58908, 59399, 59871, 60327, 60768, 61184, 61584,
61969, 62330, 62677, 63000, 63304, 63593, 63858, 64108, 64334, 64545,
64731, 64903, 65049, 65177, 65289, 65377, 65449, 65501, 65527, 65535,
65535
};

void isincos(float f, float *si, float *co)
{
  bool sneg = (f < 0);
  bool cneg = false;
  if (sneg)
  {
    f = -f;
  }

  long whole = f;
  uint8_t remain = (f - whole) * 256;

  if (whole >= 360) 
  {
    whole %= 360;
    //  possible faster for 360-720
    //  if (whole >= 720) whole %= 360;
    //  else whole -= 360;
  }

  int y = whole;  //  16 bit math is faster than 32 bit

  if (y >= 180)
  {
    y -= 180;
    sneg = !sneg;
    cneg = !cneg;
  }

  if (y >= 90)
  {
    y = 180 - y;
    if (remain != 0)
    {
      remain =   - remain;
      y--;
    }
    cneg = !cneg;
  }

  //  float value  improves ~4% on avg error  for ~60 bytes.
  //  SIN
  uint16_t value = sinTable16[y];
  //  interpolate if needed
  if (remain > 0) 
  {
    value = value + ((sinTable16[y + 1] - value) / 8 * remain) / 32;  //  == * remain / 256
  }
  *si = value * 0.0000152590219;  //  = / 65535.0
  if (sneg) *si = - *si;

  //  COS
  value = sinTable16[90-y];
  if (remain > 0)
  {
    value = sinTable16[89-y];
    remain = 256 - remain;
    value = value + ((sinTable16[90-y] - value) / 8 * remain) / 32;  //  == * remain / 256
  }
  *co = value * 0.0000152590219;  //  = / 65535.0
  if (cneg) *co = - *co;
}

#include <math.h>

#define TABLE_SIZE 256

float sinTable[TABLE_SIZE];
float cosTable[TABLE_SIZE];

void initializeLookupTables() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        float angle = i * (2.0 * M_PI / TABLE_SIZE);
        sinTable[i] = sin(angle);
        cosTable[i] = cos(angle);
    }
}

float fastSin(float radians) {
    float degrees = radians * (180.0 / M_PI);
    int index = (int)roundf(degrees) % TABLE_SIZE;
    return sinTable[index];
}

float fastCos(float radians) {
    float degrees = radians * (180.0 / M_PI);
    int index = (int)roundf(degrees) % TABLE_SIZE;
    return cosTable[index];
}




void Calc3D() {
//  GfxApiBeginTriangles();
  const float srx= sin(rotationX);
  const float crx=cos(rotationX);

  const float sry= sin(rotationY);
  const float cry= cos(rotationY);


  float z_sort=0;
  u8 cnt=3,cnt2=0;

  int x[3],y[3];
  
  for (int i = 0; i < 3*12; i++)
  {
    u8 a = i*3;
    float x1, y1, z1;
    x1 = vertices[a + 0];
    y1 = vertices[a + 1];
    z1 = vertices[a + 2];

    rotate(x1, z1, rotationY,sry,cry,&x1,&z1);
    rotate(y1, z1, rotationX,srx,crx,&y1,&z1);

    x1 = (float)(x1 * OBJ_SCALE);
    y1 = (float)(y1 * OBJ_SCALE);

    x1 += objX;
    y1 += objY;
    z1 += objZ;
    float inverse=1.0/(z1 * CAMERA_DISTANCE);
    x1 *=inverse;
    y1 *=inverse;

    x1 += SCREEN_CENTER_X;
    y1 += SCREEN_CENTER_Y;
    z_sort+=z1*7;
  //  GfxApiStoreTrianglePoint(x1, y1);// , x2, y2);
    cnt--;
    x[cnt]=x1;
    y[cnt]=y1;
    if(!cnt)
    {
   // Perform hidden surface removal by checking triangle orientation
            float dx1 = x[1] - x[0];
            float dy1 = y[1] - y[0];
            float dx2 = x[2] - x[0];
            float dy2 = y[2] - y[0];
            float cross_product = dx1 * dy2 - dy1 * dx2;

            //if (cross_product > 0) 
            {
                // Call the triangle function only for visible triangles
                VectoscopeTriangle(x[0],y[0],x[1],y[1],x[2],y[2],0);
           //     yield();
            }
      
      cnt=3;
      os_i2c_stop();
      cnt2++;
      z_sort=0;
    }
  }
  rotationX += .051;
  //if(rotationX>2*M_PI)rotationX-=2*M_PI;
  rotationY += .05;
  //if(rotationY>2*M_PI)rotationX-=2*M_PI;
  
}




void drawCube(double angle1, double angle2, int slow) {
  const double size = 20.0;
  const double pi = 3.14159;

  // Convert angles to radians
  double rad1 = angle1 * pi / 180.0;
  double rad2 = angle2 * pi / 180.0;

  // Calculate cosines and sines
  double c1 = cos(rad1);
  double s1 = sin(rad1);
  double c2 = cos(rad2);
  double s2 = sin(rad2);

  // Calculate the vertices of the cube
  double vertices[8][3] = {
    { -size, -size, -size},
    {size, -size, -size},
    {size, size, -size},
    { -size, size, -size},
    { -size, -size, size},
    {size, -size, size},
    {size, size, size},
    { -size, size, size}
  };

  // Connect the vertices to form the cube
  int edges[12][2] = {
    {0, 1}, {1, 2}, {2, 3}, {3, 0},
    {4, 5}, {5, 6}, {6, 7}, {7, 4},
    {0, 4}, {1, 5}, {2, 6}, {3, 7}
  };

  // Rotate the cube around the x-axis
  for (int i = 0; i < 8; i++) {
    double y = vertices[i][1];
    double z = vertices[i][2];
    vertices[i][1] = y * c1 - z * s1;
    vertices[i][2] = y * s1 + z * c1;
  }

  // Rotate the cube around the y-axis
  for (int i = 0; i < 8; i++) {
    double x = vertices[i][0];
    double z = vertices[i][2];
    vertices[i][0] = x * c2 + z * s2;
    vertices[i][2] = -x * s2 + z * c2;
  }

  // Draw the lines of the cube
  for (int i = 0; i < 12; i++) {
    int v1 = edges[i][0];
    int v2 = edges[i][1];
    int x1 = (int)vertices[v1][0];
    int y1 = (int)vertices[v1][1];
    int x2 = (int)vertices[v2][0];
    int y2 = (int)vertices[v2][1];
    GfxApiVectorScopeLine(x1 + 31, y1 + 31, x2 + 31, y2 + 31, 4, -1);
  }
}


unsigned char xcalc_diagram(unsigned char x, unsigned char y)
{
  return (x & 7) ? 0 : 63;


  if (y < 6)return 0;
  if (x < 32) return 0;
  if (x < 64)
  {
    if (y > 31)return 63;
    return 0;
  }
  if (x < 64 + 32)
  {
    if (y < 32)return 63;
    return 0;
  }
  return 63;


  return 63 - calc_diagram2(x, y);
}


void play_video()
{
  u16 br = 0;
  Serial.begin(9600);
  GfxApiCompressedLayer Overlay;

  long long chunks[]
  {
    pgm_get_far_address(chunk_0),
    // pgm_get_far_address(chunk_1),
    //  pgm_get_far_address(chunk_2),
    //  pgm_get_far_address(chunk_3),

  };

  int s_pos = 0;
  static unsigned char console[16 * 8];
  //GfxApiSetFreqTemporal(0);
  int chunk = 0;
  int frames_total = 100;
  unsigned long next_frame = millis();
  int milis_frame = 1000 / 25;
  next_frame += milis_frame;
  int drawn = 0;

  u8 cc[128];

  for (u8 i = 0; i < 128; i++)cc[i] = 0; //((i)%37)|((i&1)?128:0);


  for (;;)
  {
    for (int frame = 0; frame < 100; frame++)
    {
      int i;
      for (i = 0; i < 128 ;)
      {
        long long addr2 = chunks[chunk];
        addr2 += s_pos;
        int v = pgm_read_byte_far(addr2); //far
        if (v > 127)
        {
          i += v - 127;
          s_pos++;
        }
        else
        {
          console[i] = v;
          i++;
          s_pos++;
        }
      }
      {

        Overlay.Bitpos = 1;
        Overlay.BytePos = &diagram_overlay[0];
        Overlay.SkipCounter = 16;
        Overlay.PixelValue = 0;
        Overlay.Brightness = 3; //1+cntq*8;

        Overlay.Bitpos = 1;
        Overlay.BytePos = &diagram_overlay[0];
        Overlay.SkipCounter = 16;
        Overlay.PixelValue = 0;
        //  drive_128x32x4_init();

        static u8 rr;
        rr++;

        // GfxApiSetFreq(0xF0);
        //  GfxApiFlipY(1);
        //GfxApiSetFreq(0x0f);
        //        (4);
        for (;;) {
          static u8 cnt;
          cnt++;
          static u8 u = 10;
          qqqx123++;
          if (1)
            GfxApiAttachConsole(cc);

          GfxApiConsoleSetAttribute(1);
          for (i = 1; i < 4; i++)
          {
            GfxApiGotoXY(0, i);
            printf("row:%d", i);

          }


  Display(&Overlay, 0, cc, 15); //console,cat_tiles+chunk*128*8);
    delay(5000); // Delay for 5 seconds (5000 milliseconds)
  printf("change\r\n");
  Display(&Overlay, 0, cc, 15); //console,cat_tiles+chunk*128*8);
int trans[] = {134, 132, 128, 6, 4, 0};
//  ((brightness | 1 ) )&~16
// 134: 10000110 = 6?
// 132: 10000100 = 5?
// 128 nur stripes?
// 6=7 
// 4=5
// 0 no change
// 1 no change
// 2 no change
// 3 no change
// 4 image a slight bit darker / motion blur
// 5 image a slight bit darker / motion blur
// 6 dark
// 7: dark  
// 8 no change
// 9 no change
// 10 no change
// 11 no change
// 12 image a bit darker / motion blur?
// 13 image a bit darker / motion blur?
// 14 dark
// 15 dark
// 23 dark glowing random lines from top to bottom, something of the driver gooes off?
// 31 dark??
// 16 to 31 bright glowing random lines from top to bottom, something of the driver gooes off?
// 32 dark
// 36 
// 55 dark
// bit 4 set: there never seems to be anythhing on screen related to vram? turn vram / connection to it off?
// this holds for: 
// GfxApiSetDisplayUndocumentedD2(128|4|64|16);
// 128 stripes
// 64 ? flag? unused kein effekt?
//GfxApiSetDisplaySetScrollArea(0,0,0,127,4,3);
GfxApiSetDisplayStopScroll();
if(0)for(;;){

  
  GfxApiSetDisplayUndocumentedD2(0);
    delay(1000);
  GfxApiSetDisplayUndocumentedD2(4);
    Display(&Overlay, 0, cc, 15); //console,cat_tiles+chunk*128*8);

  

  //if(0)
  for(int r=0;r<1000;r++)
  for(i=0;i<64;i++)
  {
    GfxApiSetStartline(i);
//    GfxApiSetDisplayScroll(0,0,0,0,127,4);
  }
  if(0){
    GfxApiWriteVRam(128*4+i+1,255);
    
    GfxApiWriteVRam(128*4+i,0);
    delay(10);
  }
  //GfxApiSetDisplayStartScroll();
    //delay(500);
//  GfxApiSetDisplayStopScroll();
  if(0)  for(int i=1;i<5;i++)
    {
       GfxApiSetCharge(i);
       delay(1000);
    }
}

                
 

          //
          static int ii = 0;
          for (;;) {
            static u8 cnt;
            cnt++;
            ///  GfxApiSetCharge(cnt);
            for (i = 0; i < 1; i++)
            {
              timerAlarmWrite(timer, 1000000 / (1), true);
              GfxApiGotoXY(0, 2); printf("%d\r\n%d", i, scan);
              fuzz_d2 = i;
              //GfxApiSetRegD2(i);
              ii++;
              fflush(stdout);
              //  GfxApiSetCharge(i);
              // GfxApiSetSlowDrive(i);
              // GfxApiSetFreq(i);
              //  GfxApiSetRegA9(i);
              //      GfxApiSetRegF2(0);

              //  GfxApiSetRegF2(1<<5);
              //GfxApiSetRegFD(0x16);
              //  GfxApiSetRegFD(0x12^(1<<(i&7)));
              //  GfxApiSetRegF2(0);
              //GfxApiSetRegD2(i);
              xxxxxbr = 255;
              //GfxApiSetRegFE(i);
              //  fflush(stdout);
              //   GfxApiSetDisplayScroll(i);

              //    GfxApiSetStartline(i);
              //    GfxApiSetDisplayOffset(i);
              //  GfxApiSetFreq(0xf0);

              //      GfxApiSetScrollArea(0,2);
              int r;

              //   GfxApiSetDisplayScroll(0);
              yield();
              Display(&Overlay, 0, cc, 15); //console,cat_tiles+chunk*128*8);

              uint64_t startTime;

              Display(&Overlay, 0, cc, 15); //console,cat_tiles+chunk*128*8);

              static u16 cnt;
              cnt++;
              //    GfxApiSetCharge(255);

              for (;;)
              {

                //  cnt&=0xf;
                /*  GfxApiSetDisplayScroll(0,0,0,120,7,1);
                  GfxApiSetDisplayScroll(0,0,0,120,6,1);
                  GfxApiSetDisplayScroll(0,0,0,120,5,1);
                  GfxApiSetDisplayScroll(0,0,0,120,4,1);
                  GfxApiSetDisplayScroll(0,0,0,120,3,1);
                  GfxApiSetDisplayScroll(0,0,0,120,2,1);
                  GfxApiSetDisplayScroll(0,0,0,120,1,1);
                  GfxApiSetDisplayDrawRect(0,64,0,127,7,1);
                */
                uint64_t startTime;

                startTime = esp_timer_get_time();

                //GfxApiSetDisplayScroll(0,0,0,127,7,rand(),rand());


                uint64_t endTime = esp_timer_get_time();
                uint64_t elapsedTime = endTime - startTime;

                int us = elapsedTime;


                u8 dmode[] = {
                  /*    0,0,
                      0,1,
                      0,2,
                      0,3,
                      0,4,
                      0,5,
                  */
                  1, 0,
                  1, 1,
                  1, 2,
                  1, 3,
                  1, 4,
                  1, 5,

                  2, 0,
                  2, 1,
                  2, 2,
                  2, 3,
                  2, 4,
                  2, 5,

                  3, 0,
                  3, 1,
                  3, 2,
                  3, 3,
                  3, 4,
                  3, 5,

                  4, 0,
                  4, 1,
                  4, 2,
                  4, 3,
                  4, 4,
                  4, 5,
                };

                GfxApiSetBrightness(15);
                GfxApiSetCharge(2);
                int mode = 0;
 if(0)               for (;;)
                {
                  int trans[] = {134, 132, 128, 6, 4, 0};
                  GfxApiSetDisplayUndocumentedD2(trans[dmode[mode * 2 + 1]]);
                  GfxApiSetCharge(dmode[mode]);
                  Display(&Overlay, 0, cc, 15); //console,cat_tiles+chunk*128*8);
                  GfxApiGotoXY(0, 1);
                  printf("mode:%d\r\nRegD1:\r\n%d  ", mode, trans[dmode[mode * 2 + 1]]);

                  tri_size++;
                  if (tri_size == 64)tri_size = 0, mode++;
                  if (mode == 6 * 3)mode = 0;
                }
                //     GfxApiSetDisplayScrollC();
                double counter = 0, adder = 0;

                int slow = 0;

                GfxApiStartVectorScope(0);
                // for(;;);
                //  poke_init();
                float cdiv = 1.0 / 16;
                GfxApiSetFreq(0xf0);
                for (;;)
                {
                  static u16 cnt;
                  cnt += 1;

                  fuzz_d2 = cnt >> 4;


                  //GfxApiVectorScopeLine(31,31,63,63,3,5);

                  int xx = 0;
                  static float cccn;
                  cccn += 0.03;

                  float scale = 1 + sin(cccn);
                  scale *= 2;
                  scale += 3;
                  double rotated[256];
                  static double rot;
                  rot += 0.05;

            //      rotatePoints(spaceship, sizeof(spaceship) / (sizeof(spaceship[0]) * 1), rot, rotated);


                  static u8 bbb, bbb2;

                  {

                    if (Serial.available()) {
                      int data = Serial.parseInt();
                      if (Serial.read() == '\n') {
                        // Successfully read an integer from serial
                        Serial.print("Received integer: ");
                        Serial.println(data);
                      } else {
                        // Invalid data format
                        Serial.println("Invalid data format");
                      }
                      //GfxApiSetDisplayUndocumentedD2(data);
                      //  for(i=0;i<sizeof(draw_mode)/8;i+=2)draw_mode[i*2]=0x94,draw_mode[i*2+1]=data;
                    }
                  }
//        Serial.print("i2c cmds: ");
  //                      Serial.println(i2c_counter
//                        );
          i2c_counter=0;
          
//    
{
  static double counter;
  counter+=0.01;           
/*   u8 x=sin(counter)*28+31;
      u8 y=cos(counter*1.1)*25+31;
  
   u8 x1=sin(counter*1.23)*28+31;
      u8 y1=cos(counter*1.21)*25+31;
  
   u8 x2=sin(counter*1.3)*28+31;
      u8 y2=cos(counter*1.3)*25+31;
   VectoscopeTriangle(y,x1,y1,x2,y2,x,1);
   os_i2c_stop();
  // for(int x=0;x<60;x+=20)
  // VectoscopeTriangle(x,x,x1,y1,x2,y2,1);*/
   os_i2c_stop();
/*tri: 65
07:34:17.666 -> 10
07:34:17.666 -> 102
07:34:17.666 -> 46
07:34:17.666 -> 25
07:34:17.666 -> 44
*/
                    GfxApiSetDisplayUndocumentedD2(4);
  
 rtc_wdt_feed();  // Reset the watchdog timer
    rtc_wdt_disable();  // Disable the watchdog
    
    //VectoscopeTriangle(65,10,102, 46,25,44,0);
//cli();
//for(;;)
Calc3D();
sei();   
   //   VectoscopeTriangle(x/2,y/2,x1/2,y1/2,x2,y2,1);
//       VectoscopeTriangle(x/2,y/2,x1/2,y1/2,x2,y2,1);
   //   VectoscopeTriangle(x+20,y,x1+30,y1,x2,y2,1);
     
    
      
}
                  if (1)
                    for (i = 0; i < 25; i++)
                    {
                      //dmode[i*2]
                      GfxApiSetDisplayUndocumentedD2(4);
                    GfxApiSetDisplayMux(1);
//for(int xq=0;xq<1;xq++)
int xq=0;
//                      xxxGfxApiVectorScopeLine2(31 +xq+ rotated[i * 4]*scale, 31 + rotated[1 + i * 4]*scale, 31+xq + rotated[i * 4 + 2]*scale, 31 + rotated[i * 4 + 3]*scale);//,
                                          //  dmode[i * 2], 100);

                    }
                  static int subc;
                  //GfxApiSetBlink(counter+subc);

                  //    GfxApiVectorscopeDisplay(x,y);
                  //   GfxApiVectorScopeLine(31,31,x2,y2,1,5);


                  ;
                  counter += 0.05;
                  if (counter == 64)counter = 0, subc++;
                  adder += 0.0001;
                }
              }
              /*
                for(;;)
                {
                if(vsync_flag)
                {
                //    SCREEN_MODE_DRIVER();
                //    GfxApiSetDisplayScroll(0);
                  vsync_flag=0;
                }
                }
              */
              //  GfxApiSetDisplayMux(63);
              //  ets_delay_us(150);

              //  GfxApiSetDisplayMux(0);


            }


          }
          //           GfxApiSetBrightness(cnt>>4);



          if (1)
            for (;;) {
              drive_128x32x2_t();
              while (!vsync_flag);
              vsync_flag = 0;
            }
        }
        {

          int i;
#define RSTART 100
          static int qqq = 256;

          qqq--;
          if (qqq < 100)qqq = 512;

          long long s = millis();
          GfxApiSetDisplayOn(0);
          GfxApiSetInvert(0);
          {
            static u8 xi = 31;


            GfxApiSetInvert(0);
            GfxApiSetDisplayOn(0);

          }
        }
        //     while(millis()<next_frame)
        ;
        //   Display(0, 0, 0,0,console,cat_tiles);

        //  GfxApiSetBrightness(rand()&0xf);
        //      GfxApiSetFreq(0xa0);
        //      GfxApiSetDisplayMux(0);

        drawn++;
      }
      next_frame += milis_frame;
      frames_total--;
      if (!frames_total)
      {
        //        Serial.println(drawn);
        return;
      }

    }
    chunk++;
    s_pos = 0;
  }
}

void loop()
{
  for (;;)
    play_video();

}


#ifndef __AVR__

// Callback function to be executed by the timer
void timer_callback() {
  vsync_flag = 1;
  // Add your code here
  // This function will be called at the specified frequency
}



void setup_timer() {
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &timer_callback, true);
  timerAlarmWrite(timer, 1000000 / 1, true);
  timerAlarmEnable(timer);

}

void stop_timer() {
  // Stop and delete the timer
}
#endif

void MainTask() {
  initializeLookupTables();
  int i;  cli();//stop all interrupts
  /*
    // turn on CTC mode
    TCCR1A = 0;// set entire TCCR1A register to 0
    TCCR1B = 0;// same for TCCR1B
    TCCR1B |= (1 << WGM12);
    // Set CS11 bit for prescaler 8
    TCCR1B |= (1 << CS11);

    //initialize counter value to 0;
    TCNT1  = 0;

    // set timer count for 50Hz increments
    OCR1A = 39999/TDIV;// = (16*10^6) / (50*8) - 1

    // enable timer compare interrupt
    TIMSK1 |= (1 << OCIE1A);
  */
  sei();//allow interrupts
  setup_timer();
  tri_size = 30;

  loop();
}
/* clock:
      for(;;)
  {
   static u16 cnt;
   cnt+=1;

   fuzz_d2=cnt>>4;

   if((cnt&0xff)==0)Serial.println(cnt);

//                VectoscopeTriangle(20,20,40,40,10,60,1);
      u8 x=sin(counter)*28+31;
      u8 y=cos(counter)*28+31;



      u8 x2=sin(counter*2.2)*28+31;

      u8 y2=cos(counter*2.2)*28+31;


      u8 x3=sin(counter*1.5)*28+31;

      u8 y3=sin(counter*1.6)*28+31;

  int xx=0;
  {
   GfxApiVectorScopeLine(31,31,x,y,3,5);

   GfxApiVectorScopeLine(31,31,x2,y2,1,5);

  }
  ;
   counter+=0.01;
     adder+=0.0001;
     }
  }
*/
